- AlgDesign:
    download2020: 483218
    depends: ''
    imports: ''
    suggests: ''
    author: Bob Wheeler <bwheelerg@gmail.com>
    date: '2019-11-29'
    version: 1.2.0
    title: Algorithmic Experimental Design
    description: Algorithmic experimental designs. Calculates exact and approximate
      theory experimental designs for D,A, and I criteria. Very large designs may
      be created. Experimental designs may be blocked or blocked designs created from
      a candidate list, using several criteria. The blocking can be done when whole
      and within plot factors interact.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type:
      - randomised design
      - optimised design
    main:
      - optBlock
        - randomised/optimised design
        - optBlock(frml,withinData,blocksizes,rows=NULL,wholeBlockData=NULL,center=FALSE,nRepeats=5,criterion="D",args=FALSE)
      - optFederov
        - optimised design
        - optFederov(frml,data,nTrials,center=FALSE,approximate=FALSE,criterion="D",evaluateI=FALSE,space=NULL,augment=FALSE,rows,nullify=0,maxIteration=100,nRepeats=5,DFrac=1,CFrac=1,args=FALSE)
      - optMonteCarlo
        - optimised design
        - optMonteCarlo(frml,data,nTrials,approximate=FALSE,criterion="D",evaluateI=FALSE,space=NULL,mixtureSum=1,constraints=NULL,RandomStart=TRUE,nRepeats=5,nCand,nCandNull,DFrac=1,CFrac=1,args=FALSE)
    data: 'no'
- agricolae:
    download2020: 266248
    depends: R (>= 2.10)
    imports: klaR, MASS, nlme, cluster, AlgDesign, graphics
    suggests: ''
    author: Felipe de Mendiburu
    date: '2021-06-05'
    version: 1.3-5
    title: Statistical Procedures for Agricultural Research
    description: Original idea was presented in the thesis "A statistical analysis
      tool for agricultural research" to obtain the degree of Master on science, National
      Engineering University (UNI), Lima-Peru. Some experimental data for the examples
      come from the CIP and others research. Agricolae offers extensive functionality
      on experimental design especially for agricultural and plant breeding experiments,
      which can also be useful for other purposes. It supports planning of lattice,
      Alpha, Cyclic, Complete Block, Latin Square, Graeco-Latin Squares, augmented
      block, factorial, split and strip plot designs. There are also various analysis
      facilities for experimental data, e.g. treatment comparison procedures and several
      non-parametric tests comparison, biodiversity indexes and consensus cluster.
    paper: https://peerj.com/preprints/1404v1.pdf
    domain: agriculture
    relevance: 'yes'
    type:
      - randomised design
    main:
      - design.ab
        - randomised design
        - design.ab(trt, r, serie = 2, design=c("rcbd","crd","lsd"), seed = 0, kinds = "Super-Duper",first=TRUE,randomization=TRUE)
      - design.alpha
        - randomised design
        - design.alpha(trt, k, r, serie = 2, seed = 0, kinds = "Super-Duper",randomization=TRUE)
      - design.bib
        - randomised design
        - design.bib(trt, k, r=NULL, serie = 2, seed = 0, kinds = "Super-Duper", maxRep=20,randomization=TRUE)
      - design.crd
        - randomised design
        - design.crd(trt, r, serie = 2, seed = 0, kinds = "Super-Duper",randomization=TRUE)
      - design.cyclic
        - randomised design
        - design.cyclic(trt, k, r, serie = 2, rowcol = FALSE, seed = 0, kinds = "Super-Duper" ,randomization=TRUE)
      - design.dau
        - randomised design
        - design.dau(trt1, trt2, r, serie = 2, seed = 0, kinds = "Super-Duper", name="trt" ,randomization=TRUE)
      - design.graeco
        - randomised design, latin square design
        - design.graeco(trt1, trt2, serie = 2, seed = 0, kinds = "Super-Duper",randomization=TRUE)
      - design.lattice
        - randomised design
        - design.lattice(trt, r=3, serie = 2, seed = 0, kinds = "Super-Duper",randomization=TRUE)
      - design.lsd
        - randomised design, latin square design
        - design.lsd(trt, serie = 2, seed = 0, kinds = "Super-Duper",first=TRUE,randomization=TRUE)
      - design.rcbd
        - randomised design 
        - design.rcbd(trt, r, serie = 2, seed = 0, kinds = "Super-Duper", first=TRUE, continue=FALSE,randomization=TRUE)
      - design.split
        - randomised design
        - design.split(trt1, trt2,r=NULL, design=c("rcbd","crd","lsd"),serie = 2, seed = 0, kinds = "Super-Duper", first=TRUE,randomization=TRUE)
      - design.strip
        - randomised design 
        - design.strip(trt1, trt2,r, serie = 2, seed = 0, kinds = "Super-Duper",randomization=TRUE)
      - design.youden 
        - incomplete block design 
        - design.youden(trt, r, serie = 2, seed = 0, kinds = "Super-Duper",first=TRUE ,randomization=TRUE)
    data: 'yes'
- lhs:
    download2020: 216668
    depends: R (>= 3.4.0)
    imports: Rcpp
    suggests: testthat, assertthat, DoE.base, knitr, rmarkdown, covr
    author: Rob Carnell [aut, cre] <bertcarnell@gmail.com>
    date: '2020-10-05'
    version: 1.1.1
    title: Latin Hypercube Samples
    description: Provides a number of methods for creating and augmenting Latin Hypercube
      Samples and Orthogonal Array Latin Hypercube Samples.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type:
      - space filling
      - sampling design
      - optimised design
      - latin hypercube sample
    main: 
      - randomLHS
        - randomised design, latin hypercube sample design
        - randomLHS(n, k, preserveDraw = FALSE)
      - augmentLHS
        - latin hypercube sample design
        - augmentLHS(lhs, m = 1)
      - geneticLHS
        - optimised design, latin hypercube sample design
        - geneticLHS(n = 10,k = 2,pop = 100,gen = 4,pMut = 0.1, criterium = "S", verbose = FALSE)
      - maximinLHS 
        - optimised design, latin hypercube sample design
        - maximinLHS(n,k,method = "build",dup = 1,eps = 0.05,maxIter = 100, optimize.on = "grid", debug = FALSE)
      - improvedLHS 
        - optimised design, latin hypercube design
        - improvedLHS(n, k, dup = 1)
      - optimumLHS
        - optimised design, latin hypercube sample design
        - optimumLHS(n = 10, k = 2, maxSweeps = 2, eps = 0.1, verbose = FALSE)
      - create_oalhs
        - latin hypercube sample design
        - create_oalhs(n, k, bChooseLargerDesign, bverbose)
    data: 'no'
- DiceDesign:
    download2020: 116634
    depends: R (>= 2.10)
    imports: ''
    suggests: rgl, randtoolbox, lattice
    author: Jessica Franco, Delphine Dupuy, Olivier Roustant, Patrice Kiener, Guillaume
      Damblin and Bertrand Iooss.
    date: '2021-02-10'
    version: '1.9'
    title: Designs of Computer Experiments
    description: Space-Filling Designs and space-filling criteria (distance-based
      and uniformity-based), with emphasis to computer experiments; <doi:10.18637/jss.v065.i11>.
    domain: computer experiment
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v065i11/v65i11.pdf
    relevance: 'yes'
    type:
      - space filling
    main: 
      - dmaxDesign
        - space filling design 
        - dmaxDesign(n, dimension, range, niter_max=1000, seed=NULL)
      - straussDesign
        - space filling design
        - straussDesign(n,dimension, RND, alpha=0.5, repulsion=0.001, NMC=1000, constraints1D=0, repulsion1D=0.0001, seed=NULL)
      - coverage
        - distance-based space filling criteria
        - coverage(design)
      - meshRatio
        - distance-based space filling criteria
        - meshRatio(design)
      - mindist
        - distance-based space filling criteria
        - mindist(design)
      - discrepancyCriteria
        - uniformity-based space filling criteria
        - discrepancyCriteria(design,type='all')
    data: 'yes'
- DiceKriging:
    download2020: 111269
    depends: methods
    imports: ''
    suggests: rgenoud (>= 5.8-2.0), foreach, doParallel, testthat, numDeriv
    author: 'Olivier Roustant <roustant@insa-toulouse.fr>, David Ginsbourger, Yves Deville. Contributors: Clement
      Chevalier, Yann Richet.'
    date: '2021-02-23'
    version: 1.6.0
    title: Kriging Methods for Computer Experiments
    description: 'Estimation, validation and prediction of kriging models. Important
      functions : km, print.km, plot.km, predict.km.'
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v051i01/v51i01.pdf
    domain: computer experiment
    relevance: 'no'
    type:
      - modeling
    main: 
      - km
        - model estimation
        - km(formula=~1, design, response, covtype="matern5_2",
        coef.trend = NULL, coef.cov = NULL, coef.var = NULL,
        nugget = NULL, nugget.estim=FALSE, noise.var=NULL, estim.method="MLE", penalty = NULL, 
        optim.method = "BFGS", lower = NULL, upper = NULL, parinit = NULL, multistart = 1, 
        control = NULL, gr = TRUE, iso=FALSE, scaling=FALSE, knots=NULL, kernel=NULL)
      - predict
        - model prediction
        - predict(object, newdata, type, se.compute = TRUE, cov.compute = FALSE, light.return = FALSE, 
        bias.correct = FALSE, checkNames = TRUE, ...)
      - plot
        - model visualisation
        - plot(x, y, kriging.type = "UK", trend.reestim = FALSE, ...)
      - simulate
        - model simulation
        - simulate(object, nsim=1, seed=NULL, newdata=NULL,cond=FALSE, nugget.sim=0, checkNames=TRUE, ...)
    data: 'no'
- ez:
    download2020: 105151
    depends: R (>= 3.1)
    imports: |-
      car (>= 2.1-3), ggplot2 (>= 2.1.0), lme4 (>= 1.1-12), MASS (>=
      7.3-45), Matrix (>= 1.2-7.1), mgcv (>= 1.8-12), plyr (>=
      1.8.4), reshape2 (>= 1.4.2), scales (>= 0.4.0), stringr (>=
      1.1.0)
    suggests: ''
    author: Michael A. Lawrence <mike.lwrnc@gmail.com>
    date: '2016-11-01'
    version: 4.4-0
    title: Easy Analysis and Visualization of Factorial Experiments
    description: Facilitates easy analysis of factorial experiments, including purely
      within-Ss designs (a.k.a. "repeated measures"), purely between-Ss designs, and
      mixed within-and-between-Ss designs. The functions in this package aim to provide
      simple, intuitive and consistent specification of data analysis and visualization.
      Visualization functions also include design visualization for pre-analysis data
      auditing, and correlation matrix visualization. Finally, this package includes
      functions for non-parametric analysis, including permutation tests and bootstrap
      resampling. The bootstrap function obtains predictions either by cell means
      or by more advanced/powerful mixed effects models, yielding predictions and
      confidence intervals that may be easily visualized at any level of the experiment's
      design.
    paper: ''
    domain: 'general'
    relevance: 'no'
    type:
      - modeling
      - visualisation 
      - analysis of experiment
    main: 
      - ezANOVA
        - model estimation
        - ezANOVA(data, dv, wid, within = NULL, within_full = NULL, within_covariates = NULL , 
        between = NULL, between_covariates = NULL , observed = NULL, diff = NULL, reverse_diff = FALSE,
        type = 2, white.adjust = FALSE, detailed = FALSE, return_aov = FALSE)
      - ezMixed
        - model estimation 
        - ezMixed(data, dv, family = gaussian , random, fixed, covariates = NULL , add_q = FALSE,
        fix_gam = TRUE, cov_gam = TRUE, gam_smooth = c('s','te') , gam_bs = 'ts', gam_k = Inf,
        use_bam = FALSE, alarm = FALSE , term_labels = NULL, highest = Inf , return_models = TRUE, 
        correction = AIC, progress_dir = NULL , resume = FALSE, parallelism = 'none' , gam_args = NULL,
        mer_args = NULL )
      - ezPredict
        - model prediction
        - ezPredict(fit, to_predict = NULL, numeric_res = 0, boot = TRUE, iterations = 1e3, zero_intercept_variance = FALSE)
      - ezBoot
        - resampling
        - ezBoot( data, dv, wid, within = NULL, between = NULL, resample_within = TRUE , iterations = 1e3, 
        lmer = FALSE, lmer_family = gaussian , parallel = FALSE, alarm = FALSE)
      - ezPlot
        - factorial experiment data visualisation
        - ezPlot(data, dv, wid, within = NULL, within_full = NULL, within_covariates = NULL, 
        between = NULL, between_full = NULL, between_covariates = NULL ,x, do_lines = TRUE,
        do_bars = TRUE, bar_width = NULL, bar_size = NULL, split = NULL, row = NULL, col = NULL,
        to_numeric = NULL, x_lab = NULL, y_lab = NULL, split_lab = NULL, levels = NULL, diff = NULL,
        reverse_diff = FALSE, type = 2, dv_levs = NULL, dv_labs = NULL, y_free = FALSE, print_code = FALSE)
      - ezPlot2
        - model visualisation
        - ezPlot2(preds, CI = .95, x = NULL, split = NULL, row = NULL, col = NULL, do_lines = TRUE, 
        ribbon = FALSE, CI_alpha = .5, point_alpha = .8 , line_alpha = .8 , bar_width = NULL,
        to_numeric = NULL , x_lab = NULL, y_lab = NULL, split_lab = NULL , levels = NULL, diff = NULL,
        reverse_diff = NULL , y_free = FALSE, alarm = FALSE, do_plot = TRUE, print_code = FALSE , 
        parallel = FALSE)
    data: 'yes'
- FrF2:
    download2020: 92423
    depends: R(>= 2.13.0), DoE.base(>= 0.25)
    imports: |-
      sfsmisc(>= 1.0-26), utils, scatterplot3d, igraph(>= 0.7),
      methods
    suggests: FrF2.catlg128, BsMD
    author: Ulrike Groemping <groemping@beuth-hochschule.de>
    date: '2020-05-29'
    version: 2.2-2
    title: Fractional Factorial Designs with 2-Level Factors
    description: Regular and non-regular Fractional Factorial 2-level designs can
      be created. Furthermore, analysis tools for Fractional Factorial designs with
      2-level factors are offered (main effects and interaction plots for all factors
      simultaneously, cube plot for looking at the simultaneous effects of three factors,
      full or half normal plot, alias structure in a more readable format than with
      the built-in function alias).
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v056i01/v56i01.pdf
    domain: 'general'
    relevance: 'yes'
    type:
      - fractional factorial design
    main: 
      - FrF2
        - fractional factorial design
        - FrF2(nruns = NULL, nfactors = NULL, factor.names = if (!is.null(nfactors)) 
        { if (nfactors <= 50) Letters[1:nfactors] else paste("F", 1:nfactors, sep = "")} else NULL, 
        default.levels = c(-1, 1), ncenter=0, center.distribute=NULL, generators = NULL, design = NULL,
        resolution = NULL, select.catlg=catlg,estimable = NULL, clear = TRUE, method="VF2", 
        sort="natural", ignore.dom = !isTRUE(all.equal(blocks,1)), useV = TRUE, firsthit=FALSE, 
        res3 = FALSE, max.time = 60, perm.start=NULL, perms = NULL,MaxC2 = FALSE, replications = 1, 
        repeat.only = FALSE, randomize = TRUE, seed = NULL, alias.info = 2,
        blocks = 1, block.name = "Blocks", block.old=FALSE, force.godolphin=FALSE, bbreps=replications, 
        wbreps=1,alias.block.2fis = FALSE,hard = NULL, check.hard=10, WPs=1,nfac.WP=0, WPfacs=NULL, 
        check.WPs = 10, ...)
      - pb
        - fractional factorial design
        - pb(nruns, nfactors = nruns-1, factor.names = if (nfactors <= 50) Letters[1:nfactors] 
        else paste("F", 1:nfactors, sep = ""), default.levels = c(-1, 1), ncenter=0, 
        center.distribute=NULL, boxtyssedal = TRUE, n12.taguchi = FALSE, replications = 1, 
        repeat.only = FALSE, randomize = TRUE, seed = NULL, oldver = FALSE, ...)
      - FrF2Large
        - fractional factorial design
        - FrF2Large(nruns, nfactors = NULL, factor.names = if (!is.null(nfactors)){ if (nfactors <= 50)
        Letters[1:nfactors] else paste("F", 1:nfactors, sep = "")} 
        else NULL, default.levels = c(-1, 1), ncenter = 0, center.distribute = NULL, generators = NULL,
        replications = 1, repeat.only = FALSE, randomize = TRUE, seed = NULL, alias.info = 2, ...)
    data: 'no'
- DoE.base:
    download2020: 91015
    depends: R (>= 2.10), grid, conf.design
    imports: |-
      stats, utils, graphics, grDevices, vcd, combinat, MASS,
      lattice, numbers, partitions
    suggests: FrF2, DoE.wrapper, RColorBrewer
    author: Ulrike Groemping [aut, cre], Boyko Amarov [ctb], Hongquan Xu [ctb]
    date: '2021-02-05'
    version: 1.1-6
    title: Full Factorials, Orthogonal Arrays and Base Utilities for DoE Packages
    description: Creates full factorial experimental designs and designs based on
      orthogonal arrays for (industrial) experiments. Provides diverse quality criteria.
      Provides utility functions for the class design, which is also used by other
      packages for designed experiments.
    paper: https://www.jstatsoft.org/article/view/v085i05/v85i05.pdf
    domain: industrial experiment
    relevance: 'yes'
    type:
      - factorial design
    main: 
      - fac.design
        - factorial design
        - fac.design(nlevels=NULL, nfactors=NULL, factor.names = NULL, replications=1, 
        repeat.only = FALSE, randomize=TRUE, seed=NULL, blocks=1, block.gen=NULL, block.name="Blocks", 
        bbreps=replications, wbreps=1, block.old.behavior=FALSE)
      - oa.design 
        - factorial design, optimised design
        - oa.design(ID=NULL, nruns=NULL, nfactors=NULL, nlevels=NULL, factor.names = if (!is.null(nfactors)) 
        {if (nfactors <= 50) Letters[1:nfactors] else paste("F", 1:nfactors, sep = "")} else NULL,
        columns="order", replications=1, repeat.only=FALSE, randomize=TRUE, seed=NULL, min.residual.df=0, 
        levordold = FALSE)
      - generalized.word.length
        - optimised design
        - lengths(design, ...)
    data: 'no'
- rsm:
    download2020: 64632
    depends: ''
    imports: estimability
    suggests: emmeans (> 1.3.5.1), Vdgraph, conf.design, DoE.base, FrF2
    author: Russell Lenth [aut, cre]
    date: '2020-09-03'
    version: 2.10.2
    title: Response-Surface Analysis
    description: 'Provides functions to generate response-surface designs, fit first-
      and second-order response-surface models, make surface plots, obtain the path
      of steepest ascent, and do canonical analysis. A good reference on these methods
      is Chapter 10 of Wu, C-F J and Hamada, M (2009) "Experiments: Planning, Analysis,
      and Parameter Design Optimization" ISBN 978-0-471-69946-0.'
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v032i07/v32i07.pdf
    domain: 'general'
    relevance: 'yes'
    type:
      - response-surface design
      - optimised design
      - analysis of experiment 
    main: 
      - ccd
        - response-surface design
        - ccd(basis, generators, blocks = "Block", n0 = 4, alpha = "orthogonal",
        wbreps = 1, bbreps = 1, randomize = TRUE, inscribed = FALSE,
        coding, oneblock = FALSE)
      - bbd
        - response-surface design, optimised design
        - bbd(k, n0 = 4, block = (k == 4 | k == 5), randomize = TRUE, coding)
      - ccd.pick
        - optimised design
        - ccd.pick(k, n.c = 2^k, n0.c = 1:10, blks.c = 1, n0.s = 1:10, bbr.c = 1, wbr.s = 1, 
        bbr.s = 1, best = 10, sortby = c("agreement", "N"), restrict)
      - rsm 
        - model estimation 
        - rsm(formula, data, ...)
    data: 'no'
- conf.design:
    download2020: 61649
    depends: ''
    imports: ''
    suggests: stats, utils
    author: Bill Venables <Bill.Venables@gmail.com>
    date: '2013-02-22'
    version: 2.0.0
    title: Construction of factorial designs
    description: This small library contains a series of simple tools for constructing
      and manipulating confounded and fractional factorial designs.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type:
      - factorial design
    main: 
      - conf.design
        - factorial design
        - conf.design(G, p, block.name = "Blocks", treatment.names = NULL)
      - rjoin
        - factorial design
        - rjoin(..., part.name="Part")
      - direct.sum
        - factorial design
        - direct.sum(D1, ..., tiebreak=letters)
    data: 'no'
- tgp:
    download2020: 49868
    depends: R (>= 2.14.0)
    imports: maptree
    suggests: MASS
    author: Robert B. Gramacy <rbg@vt.edu> and Matt A. Taddy <mataddy@amazon.com>
    date: '2020-09-11'
    version: 2.4-17
    title: Bayesian Treed Gaussian Process Models
    domain: 'general'
    description: Bayesian nonstationary, semiparametric nonlinear regression and design
      by treed Gaussian processes (GPs) with jumps to the limiting linear model (LLM).
      Special cases also implemented include Bayesian linear models, CART, treed linear
      models, stationary separable and isotropic GPs, and GP single-index models.
      Provides 1-d and 2-d plotting functions (with projection and slice capabilities)
      and tree drawing, designed for visualization of tgp-class output. Sensitivity
      analysis and multi-resolution models are supported. Sequential experimental
      design and adaptive sampling functions are also provided, including ALM, ALC,
      and expected improvement. The latter supports derivative-free optimization of
      noisy black-box functions.
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v019i09/v19i09.pdf
    relevance: 'no'
    type:
      - modeling
    main: 
      - blm
        - modeling 
        - blm(X, Z, XX = NULL, meanfn = "linear", bprior = "bflat", BTE = c(1000, 4000, 3), 
        R = 1, m0r1 = TRUE, itemps = NULL, pred.n = TRUE, krige = TRUE, zcov = FALSE, Ds2x = FALSE, 
        improv = FALSE, sens.p = NULL, trace = FALSE, verb = 1, ...)
      - btlm
        - modeling
        - btlm(X, Z, XX = NULL, meanfn = "linear", bprior = "bflat", tree = c(0.5, 2), 
        BTE = c(2000, 7000, 2), R = 1, m0r1 = TRUE, itemps = NULL, pred.n = TRUE, krige = TRUE, 
        zcov = FALSE, Ds2x = FALSE, improv = FALSE, sens.p = NULL, trace = FALSE, verb = 1, ...)
      - bcart 
        - modeling
        - bcart(X, Z, XX = NULL, bprior = "bflat", tree = c(0.5, 2),
        BTE = c(2000, 7000, 2), R = 1, m0r1 = TRUE, itemps = NULL, pred.n = TRUE, krige = TRUE, 
        zcov = FALSE, Ds2x = FALSE, improv=FALSE, sens.p = NULL, trace = FALSE, verb = 1, ...)
      - bgp
        - modeling
        - bgp(X, Z, XX = NULL, meanfn = "linear", bprior = "bflat",
        corr = "expsep", BTE = c(1000, 4000, 2), R = 1, m0r1 = TRUE, itemps = NULL, pred.n = TRUE, 
        krige = TRUE, zcov = FALSE, Ds2x = FALSE, improv = FALSE, sens.p = NULL, nu = 1.5, 
        trace = FALSE, verb = 1, ...)
      - bgpllm 
        - modeling
        - bgpllm(X, Z, XX = NULL, meanfn = "linear", bprior = "bflat", 
        corr = "expsep", gamma=c(10,0.2,0.7), BTE = c(1000, 4000, 2), R = 1, m0r1 = TRUE, itemps = NULL, 
        pred.n = TRUE, krige = TRUE, zcov = FALSE, Ds2x = FALSE, improv = FALSE, sens.p = NULL, 
        nu = 1.5, trace = FALSE, verb = 1, ...)
      - btgp 
        - modeling
        - btgp(X, Z, XX = NULL, meanfn = "linear", bprior = "bflat", corr = "expsep", tree = c(0.5, 2), 
        BTE = c(2000, 7000, 2), R = 1, m0r1 = TRUE, linburn = FALSE, itemps = NULL, pred.n = TRUE, 
        krige = TRUE, zcov = FALSE, Ds2x = FALSE, improv = FALSE, sens.p = NULL, nu = 1.5, trace = FALSE, 
        verb = 1, ...)
      - btgpllm 
        - modeling
        - btgpllm(X, Z, XX = NULL, meanfn = "linear", bprior = "bflat", corr = "expsep", tree = c(0.5, 2), 
        gamma=c(10,0.2,0.7), BTE = c(2000, 7000, 2), R = 1, m0r1 = TRUE, linburn = FALSE, itemps = NULL, 
        pred.n = TRUE, krige = TRUE, zcov = FALSE, Ds2x = FALSE, improv = FALSE, sens.p = NULL, nu = 1.5, 
        trace = FALSE, verb = 1, ...)
    data: 'yes'
- BsMD:
    download2020: 36859
    depends: R(>= 3.5.0)
    imports: ''
    suggests: ''
    author: Ernesto Barrios based on Daniel Meyer's code.
    date: '2020-04-30'
    version: 2020.4.30
    title: Bayes Screening and Model Discrimination
    description: Bayes screening and model discrimination follow-up designs.
    paper: ''
    domain: 'general'
    relevance: 'no'
    type:
      - modeling
    main: 
      - BsProb
        - modeling
        - BsProb(X, y, blk, mFac, mInt = 2, p = 0.25, g = 2, ng = 1, nMod = 10)
      - MD
        - modeling
        - MD(X,y,nFac,nBlk=0,mInt=3,g=2, nMod,p,s2,nf,facs,nFDes=4, Xcand, mIter = 20, nStart = 5, 
        startDes = NULL, top = 20, eps = 1e-05)
    data: 'yes'
- FrF2.catlg128:
    download2020: 27884
    depends: R(>= 2.13.0), FrF2(>= 1.4)
    imports: ''
    suggests: ''
    author: Ulrike Groemping
    date: '2013-04-19'
    version: 1.2-1
    title: Catalogues of resolution IV 128 run 2-level fractional factorials up to
      33 factors that do have 5-letter words
    description: This package provides catalogues of resolution IV regular fractional
      factorial designs in 128 runs for up to 33 2-level factors. The catalogues are
      complete, excluding resolution IV designs without 5-letter words, because these
      do not add value for a search for clear designs. The previous package version
      1.0 with complete catalogues up to 24 runs (24 runs and a namespace added later)
      can be downloaded from the authors website.
    paper: ''
    domain: 'general'
    relevance: 'no'
    type:
      - fractional factorial design
    main: 
      - Catalogues
        - fractional factorial designs
        - catlg128.8to15, catlg128.16, catlg128.17, catlg128.18, catlg128.19, catlg128.20, catlg128.21, 
        catlg128.22, catlg128.23, catlg128.24, catlg128.25, catlg128.26to33
    data: 'no'
- Vdgraph:
    download2020: 24411
    depends: ''
    imports: ''
    suggests: ''
    author: John Lawson <lawson@byu.edu>, with contributions from G. Vining
    date: '2014-12-12'
    version: 2.2-2
    title: Variance dispersion graphs and Fraction of design space plots for response
      surface designs
    description: Uses a modification of the published FORTRAN code in "A Computer
      Program for Generating Variance Dispersion Graphs" by G. Vining, Journal of
      Quality Technology, Vol. 25 No. 1 January 1993, to produce variance dispersion
      graphs. Also produces fraction of design space plots, and contains data frames
      for several minimal run response surface designs.
    paper: https://journal.r-project.org/archive/2012/RJ-2012-005/RJ-2012-005.pdf
    domain: 'general'
    relevance: 'no'
    type:
      - response-surface design
      - visualisation (design)
    main: 
      - Vdgraph
        - visualisation of response-surface design, variance dispersion graph 
        - Vdgraph(des)
      - FDSPlot
        - visualisation of response-surface design 
        - FDSPlot(des, mod=2)
      - Compare2Vdg
        - visualisation of response-surface design 
        - Compare2Vdg(des,des2,name1,name2,ncolleg)
    data: 'yes'
- dae:
    download2020: 23048
    depends: R (>= 3.5.0), ggplot2
    imports: graphics, methods, plyr, stats
    suggests: testthat, R.rsp
    author: Chris Brien [aut, cre]
    date: '2021-03-17'
    version: 3.1-37
    title: Functions Useful in the Design and ANOVA of Experiments
    description: 'The content falls into the following groupings: (i) Data, (ii) Factor
      manipulation functions, (iii) Design functions, (iv) ANOVA functions, (v) Matrix
      functions, (vi) Projector and canonical efficiency functions, and (vii) Miscellaneous
      functions. There is a vignette describing how to use the design functions for
      randomizing and assessing designs available as a vignette called ''DesignNotes''.
      The ANOVA functions facilitate the extraction of information when the ''Error''
      function has been used in the call to ''aov''. The package ''dae'' can also
      be installed from <http://chris.brien.name/rpackages/>.'
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type:
      - randomised design
      - analysis of experiment
      - visualisation (design)
    main: 
      - designRandomize
        - randomised design 
        - designRandomize(allocated = NULL, recipient, nested.recipients = NULL, except = NULL, seed = NULL, unit.permutation = FALSE, ...)
      - fitted.aovlist 
        - analysis of experiment
        - fitted(object, error.term=NULL, ...)
    data: 'yes'
- DoseFinding:
    download2020: 21987
    depends: lattice, mvtnorm, R (>= 2.15.0)
    imports: ''
    suggests: |-
      numDeriv, Rsolnp, quadprog, parallel, multcomp, ggplot2,
      knitr, rmarkdown, MASS, testthat
    author: Bjoern Bornkamp [aut, cre] , Jose Pinheiro [aut], Frank Bretz [aut], Ludger
      Sandig [aut]
    date: '2021-06-24'
    version: 1.0-1
    title: Planning and Analyzing Dose Finding Experiments
    description: 'The DoseFinding package provides functions for the design and analysis
      of dose-finding experiments (with focus on pharmaceutical Phase II clinical
      trials). It provides functions for: multiple contrast tests, fitting non-linear
      dose-response models (using Bayesian and non-Bayesian estimation), calculating
      optimal designs and an implementation of the MCPMod methodology (Pinheiro et
      al. (2014) <doi:10.1002/sim.6052>).'
    domain: clinical trial
    paper: https://arxiv.org/pdf/1305.0889.pdf
    relevance: 'yes'
    type:
      - dose-finding experiment
      - optimised design
      - analysis of experiment
    main: 
      - MCTtest
        - dose-finding
        - MCTtest(dose, resp, data = NULL, models, S = NULL, type = c("normal", "general"), addCovars = ~1, 
        placAdj = FALSE, alpha = 0.025, df = NULL, critV = NULL, pVal = TRUE, 
        alternative = c("one.sided", "two.sided"), na.action = na.fail, mvtcontrol = mvtnorm.control(), 
        contMat = NULL)
      - powMCT
        - dose-finding
        - powMCT(contMat, alpha = 0.025, altModels, n, sigma, S, placAdj=FALSE, 
        alternative = c("one.sided", "two.sided"), df, critV, control = mvtnorm.control())
      - fitMod
        - dose-finding 
        - fitMod(dose, resp, data = NULL, model, S = NULL, type = c("normal", "general"), 
        addCovars = ~1, placAdj start = NULL, na.action addArgs = NULL)
      - optDesign
        - optimised design 
        - optDesign(models, probs, doses, designCrit = c("Dopt", "TD", "Dopt&TD", "userCrit"),
        Delta, standDopt = TRUE, weights, nold = rep(0, length(doses)), n, control=list(), 
        optimizer = c("solnp", "Nelder-Mead", "nlminb", "exact"), lowbnd = rep(0, length(doses)), 
        uppbnd = rep(1, length(doses)), userCrit, ...)
      - MCPMod
        - dose-finding
        - MCPMod(dose, resp, data, models, S = NULL, type = c("normal", "general"), 
        addCovars = ~1, placAdj = FALSE, selModel = c("AIC", "maxT", "aveAIC"), alpha = 0.025, df = NULL, 
        critV = NULL, doseType = c("TD", "ED"), Delta, p, pVal = TRUE, 
        alternative = c("one.sided", "two.sided"), na.action = na.fail, mvtcontrol = mvtnorm.control(),
        bnds, control = NULL)
      - sampSize 
        - sample size calculation
        - sampSize(upperN, lowerN = floor(upperN/2), targFunc, target, tol = 0.001, alRatio, 
        Ntype = c("arm", "total"), verbose = FALSE)
    data: 'yes'
- daewr:
    download2020: 21087
    depends: R (>= 3.5.0)
    imports: lattice, FrF2, graphics, grDevices, stats, stringi
    suggests: R.rsp
    author: John Lawson [aut, cre], Gerhard Krennrich [aut]
    date: 2021-02-18
    version: 1.2-7
    title: Design and Analysis of Experiments with R
    description: Contains Data frames and functions used in the book "Design and Analysis
      of Experiments with R".
    paper: ''
    domain: 'general'
    relevance: 'no'
    type:
      - data container package
    main: ''
    data: 'yes'
- agridat:
    download2020: 21052
    depends: ''
    imports: ''
    suggests: |-
      AER, agricolae, betareg, broom, car, coin, corrgram, desplot,
      dplyr, effects, equivalence, emmeans, FrF2, gam, gge, ggplot2,
      gnm, gstat, HH, knitr, lattice, latticeExtra, lme4, lucid,
      mapproj, maps, MASS, MCMCglmm, metafor, mgcv, NADA, nlme,
      nullabor, ordinal, pbkrtest, pls, pscl, reshape2, rgdal,
      rmarkdown, qicharts, qtl, sp, SpATS, survival, vcd, testthat
    author: Kevin Wright [aut, cre]
    date: '2021-01-12'
    version: '1.18'
    title: Agricultural Datasets
    description: Datasets from books, papers, and websites related to agriculture.
      Example graphics and analyses are included. Data come from small-plot trials,
      multi-environment trials, uniformity trials, yield monitors, and more.
    paper: ''
    domain: agriculture
    relevance: 'no'
    type:
      - data container package
    main: ''
    data: 'yes'
- DoE.wrapper:
    download2020: 19594
    depends: R(>= 3.1.0), FrF2(>= 1.6-5), DoE.base(>= 0.23-4), rsm
    imports: stats, lhs, DiceDesign, AlgDesign(>= 1.1)
    suggests: skpr
    author: Ulrike Groemping [aut, cre], Lenth Russ [ctb]
    date: '2020-01-06'
    version: '0.11'
    title: Wrapper Package for Design of Experiments Functionality
    description: Various kinds of designs for (industrial) experiments can be created.
      The package uses, and sometimes enhances, design generation routines from other
      packages. So far, response surface designs from package rsm, latin hypercube
      samples from packages lhs and DiceDesign, and D-optimal designs from package
      AlgDesign have been implemented.
    paper: ''
    domain: industrial experiment 
    relevance: 'yes'
    type: 
      - response-surface design
      - latin hypercube sample
      - optimised design
    main: 
      - bbd.design
        - response-surface design
        - bbd.design(nfactors, ncenter=4, factor.names = NULL, default.levels=c(-1,1), block.name=NULL, 
        randomize=TRUE, seed=NULL, ...)
      - ccd.design 
        - response-surface design
        - ccd.design(nfactors=NULL, factor.names=NULL, default.levels=c(-1,1), ncube=NULL, 
        resolution=if (identical(blocks,1) & is.null(ncube)) 5 else NULL, generators=NULL, 
        ncenter = 4, alpha = "orthogonal",replications=1, block.name="Block.ccd", blocks=1, 
        randomize=TRUE, seed=NULL, ...)
      - Dopt.design 
        - optimised design
        - Dopt.design(nruns, data=NULL, formula=~., factor.names=NULL, nlevels=NULL, digits=NULL, 
        constraint=NULL, center=FALSE, nRepeats=5, seed=NULL, randomize=TRUE, blocks=1, 
        block.name="Blocks", wholeBlockData=NULL, qual=NULL, ...)
      - lhs.design 
        - latin hypercube sample
        - lhs.design(nruns, nfactors, type="optimum", factor.names=NULL, seed=NULL, digits=NULL, 
        nlevels = nruns, default.levels = c(0, 1), randomize = FALSE, ...)
    data: 'no'
- RcmdrPlugin.DoE:
    download2020: 18558
    depends: |-
      R (>= 2.10.0), utils, DoE.base (>= 0.22-8), FrF2 (>= 1.2-10),
      DoE.wrapper (>= 0.8-6), tcltk, relimp
    imports: Rcmdr, RcmdrMisc
    suggests: FrF2.catlg128
    author: Ulrike Groemping [aut, cre], Fox John [ctb]
    date: '2014-08-28'
    version: 0.12-3
    title: R Commander Plugin for (industrial) Design of Experiments
    description: The package provides a platform-independent GUI for design of experiments.
      It is implemented as a plugin to the R-Commander, which is a more general graphical
      user interface for statistics in R based on tcl/tk. DoE functionality can be
      accessed through the menu Design that is added to the R-Commander menus.
    paper: ''
    domain: industrial experiment
    relevance: 'no'
    type: 
      - GUI 
    main: ''
    data: 'no'
- crossdes:
    download2020: 18482
    depends: AlgDesign, gtools
    imports: ''
    suggests: ''
    author: Martin Oliver Sailer
    date: '2013-03-18'
    version: 1.1-1
    title: Construction of Crossover Designs
    description: Contains functions for the construction of carryover balanced crossover
      designs. In addition contains functions to check given designs for balance.
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - repeated measurement design
      - crossover design
      - dose-finding experiment
      - analysis of experiment
    main: 
      - get.plan 
        - crossover design
        - get.plan(trt, k = trt, maxsub = 1000)
      - allcombs
        - crossover design 
        - allcombs(trt, k)
      - williams
        - latin square design 
        - williams(trt)
      - williams.BIB 
        - latin square design, crossover design, balanced incomplete block design
        - williams.BIB(d)
      - des.MOLS 
        - crossover design 
        - des.MOLS(trt, k = trt)
      - balmin.RMD 
        - crossover design 
        - balmin.RMD(trt, n, p)
      - isCbalanced
        - crossover design
        - isCbalanced(d, preperiod = FALSE)
      - isGYD 
        - crossover design
        - isGYD(d, tables=FALSE, type=TRUE)
    data: 'yes'
- BHH2:
    download2020: 17844
    depends: R (>= 2.0.0)
    imports: ''
    suggests: FrF2
    author: Ernesto Barrios
    date: '2016-05-31'
    version: 2016.05.31
    title: Useful Functions for Box, Hunter and Hunter II
    description: Functions and data sets reproducing some examples in Box, Hunter
      and Hunter II. Useful for statistical design of experiments, especially factorial
      experiments.
    paper: ''
    domain: 'general'
    relevance: 'no'
    type: 
      - book dataset
      - book example 
      - factorial design 
    main: 
      - ffDesMatrix
        - factorial design, fractional factorial design 
        - ffDesMatrix(k, gen = NULL)
      - ffFullMatrix(X, x, maxInt, blk = NULL)
        - factorial design, fractional factorial design 
        - ffFullMatrix(X, x, maxInt, blk = NULL)
    data: 'yes'
- SensoMineR:
    download2020: 16786
    depends: R (>= 3.0), FactoMineR (>= 2.3)
    imports: cluster,KernSmooth,ggplot2,reshape2,AlgDesign,gtools,ggrepel
    suggests: ''
    author: Francois Husson <husson at agrocampus-ouest.fr>, Sebastien Le, Marine Cadoret
    date: '2020-05-19'
    version: '1.26'
    title: Sensory Data Analysis
    description: 'Statistical Methods to Analyse Sensory Data. SensoMineR: A package
      for sensory data analysis. S. Le and F. Husson (2008) <DOI:10.1111/j.1745-459X.2007.00137.x>.'
    paper: https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.1745-459X.2007.00137.x
    domain: sensory studies
    relevance: 'yes'
    type: 
      - sensory data analysis
    main: 
      - optimaldesign
        - optimised design 
        - optimaldesign(nbPanelist, nbProd, nbProdByPanelist=nbProd, seed=NULL)
      - triangle.design
        - triangle test
        - triangle.design (nbprod , nbpanelist, bypanelist = nbprod*(nbprod-1)/2, labprod=1:nbprod, labpanelist=1:nbpanelist)
      - WilliamsDesign
        - latin square design 
        - WilliamsDesign(nbprod,seed=NULL)
    data: 'yes'
- BOIN:
    download2020: 16462
    depends: ''
    imports: Iso
    suggests: ''
    author: Ying Yuan <yyuan@mdanderson.org> and Suyu Liu
    date: '2021-01-19'
    version: 2.7.2
    title: Bayesian Optimal INterval (BOIN) Design for Single-Agent and Drug- Combination
      Phase I Clinical Trials
    description: The Bayesian optimal interval (BOIN) design is a novel phase I clinical
      trial design for finding the maximum tolerated dose (MTD). It can be used to
      design both single-agent and drug-combination trials. The BOIN design is motivated
      by the top priority and concern of clinicians when testing a new drug, which
      is to effectively treat patients and minimize the chance of exposing them to
      subtherapeutic or overly toxic doses. The prominent advantage of the BOIN design
      is that it achieves simplicity and superior performance at the same time. The
      BOIN design is algorithm-based and can be implemented in a simple way similar
      to the traditional 3+3 design. The BOIN design yields an average performance
      that is comparable to that of the continual reassessment method (CRM, one of
      the best model-based designs) in terms of selecting the MTD, but has a substantially
      lower risk of assigning patients to subtherapeutic or overly toxic doses. For
      tutorial, please check Yan et al. (2020) <doi:10.18637/jss.v094.i13>.
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v094i13/v94i13.pdf
    domain: clinical trial
    relevance: 'yes'
    type: 
      - dose-finding experiment 
    main: 
      - get.boundary
        - dose-finding 
        - get.boundary( target, ncohort, cohortsize, n.earlystop = 100, 
        p.saf = 0.6 * target, p.tox = 1.4 * target,  cutoff.eli = 0.95, 
        extrasafe = FALSE, offset = 0.05)
      - get.oc
        - dose-finding 
        - get.oc(target, p.true, ncohort, cohortsize, n.earlystop=100, startdose=1, titration=FALSE, 
        p.saf=0.6*target, p.tox=1.4*target, cutoff.eli=0.95,extrasafe=FALSE, offset=0.05, 
        boundMTD=FALSE, ntrial=1000, seed=6)
      - select.mtd
        - dose-finding 
        - select.mtd(target, npts, ntox, cutoff.eli=0.95, extrasafe=FALSE, offset=0.05, boundMTD=FALSE,
        p.tox=1.4*target)
    data: 'no'
- blocksdesign:
    download2020: 15259
    depends: R (>= 3.1)
    imports: plyr,PolynomF
    suggests: R.rsp
    author: R. N. Edmondson.
    date: 2021-04-07
    version: '4.9'
    title: Nested and Crossed Block Designs for Factorial and Unstructured Treatment
      Sets
    description: Constructs treatment and block designs for linear treatment models
      with crossed or nested block factors. The treatment design can be any feasible
      linear model and the block design can be any feasible combination of crossed
      or nested block factors. The block design is a sum of one or more block factors
      and the block design is optimized sequentially with the levels of each successive
      block factor optimized conditional on all previously optimized block factors.
      D-optimality is used throughout except for square or rectangular lattice block
      designs which are constructed algebraically using mutually orthogonal Latin
      squares. Crossed block designs with interaction effects are optimized using
      a weighting scheme which allows for differential weighting of first and second-order
      block effects. Outputs include a table showing the allocation of treatments
      to blocks and tables showing the achieved D-efficiency factors for each block
      and treatment design. Edmondson, R.N. Multi-level Block Designs for Comparative
      Experiments. JABES 25, 500–522 (2020) <doi:10.1007/s13253-020-00416-0>.
    paper: https://link.springer.com/content/pdf/10.1007/s13253-020-00416-0.pdf
    domain: 'general'
    relevance: 'yes'
    type: 
      - randomised design
      - block design
    main: 
      - blocks
        - randomised design, block design 
        - blocks(treatments, replicates, blocks = NULL, searches = NULL, seed = NULL, jumps = 1)
      - design
        - optimised design 
        - design(treatments, blocks, treatments_model = NULL, weighting = 0.5, searches = NULL, 
        seed = NULL, jumps = 1)
    data: 'yes'
- blockTools:
    download2020: 13342
    depends: ''
    imports: MASS, tibble
    suggests: nbpMatching, RItools, xtable
    author: Ryan T. Moore <rtm@american.edu> and Keith Schnakenberg
    date: '2016-12-02'
    version: 0.6-3
    title: Block, Assign, and Diagnose Potential Interference in Randomized Experiments
    description: Blocks units into experimental blocks, with one unit per treatment
      condition, by creating a measure of multivariate distance between all possible
      pairs of units. Maximum, minimum, or an allowable range of differences between
      units on one variable can be set. Randomly assign units to treatment conditions.
      Diagnose potential interference between units assigned to different treatment
      conditions. Write outputs to .tex and .csv files.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - randomised design 
      - block design
    main: 
      - block
        - randomised design, block design 
        - block(data, vcov.data = NULL, groups = NULL, n.tr = 2, id.vars, block.vars = NULL, 
        algorithm = "optGreedy", distance = "mahalanobis", weight = NULL, optfactor = 10^7, 
        row.sort = NULL, level.two = FALSE, valid.var = NULL, valid.range = NULL, seed.dist, 
        namesCol = NULL, verbose = FALSE, ...)
      - assignment
        - randomised design 
        - assignment(block.obj, seed = NULL, namesCol = NULL)
      - diagnose
        - randomised design?
        - diagnose(object, data, id.vars, suspect.var, suspect.range = NULL)
      - outTeX
        - randomised design output
        - outTeX(block.obj, namesCol = NULL, file.names = NULL, 
        captions = NULL, digits = 2, ...)
      - outCSV
        - randomised design output
        - outCSV(block.obj, namesCol = NULL, file.names = NULL, digits = 2, ...)
      - seqblock
        - randomised design
        - seqblock(object = NULL, id.vars, id.vals, exact.vars = NULL, exact.vals = NULL, 
        exact.restr = NULL, exact.alg = "single", covar.vars = NULL, covar.vals = NULL, 
        covar.restr = NULL, covars.ord = NULL, n.tr = 2, tr.names = NULL, assg.prob = NULL, 
        seed = NULL, seed.dist, assg.prob.stat = NULL, trim = NULL, assg.prob.method = NULL,
        assg.prob.kfac = NULL, distance = NULL, file.name = NULL, query = FALSE, verbose = TRUE, ...)
    data: 'yes'
- dfcrm:
    download2020: 12562
    depends: ''
    imports: ''
    suggests: ''
    author: Ken Cheung <yc632@columbia.edu>
    date: '2013-08-01'
    version: 0.2-2.1
    title: Dose-Finding by the Continual Reassessment Method
    description: Provides functions to run the CRM and TITE-CRM in phase I trials
      and calibration tools for trial planning purposes.
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - dose-finding experiment 
      - continual reassessment method
    main: 
      - crm 
        - dose-finding, continual reassessment method
        - crm(prior, target, tox, level, n = length(level), dosename = NULL, include = 1:n, 
        pid = 1:n, conf.level = 0.9, method = "bayes", model = "empiric", intcpt = 3, 
        scale = sqrt(1.34), model.detail = TRUE, patient.detail = TRUE, var.est = TRUE)
      - titecrm
        - dose-finding, continual reassessment method
        - titecrm(prior, target, tox, level, n = length(level), weights = NULL, followup = NULL, 
        entry = NULL, exit = NULL, obswin = NULL, scheme = "linear", conf.level = 0.9, dosename = NULL, 
        include = 1:n, pid = 1:n, method = "bayes", model = "empiric", var.est = TRUE, 
        scale = sqrt(1.34), intcpt = 3, model.detail = TRUE, patient.detail = TRUE, tite = TRUE)
    data: 'no'
- powerAnalysis:
    download2020: 12224
    depends: ''
    imports: ''
    suggests: ''
    author: Felix Yanhui Fan <nolanfyh@gmail.com>
    date: '2017-02-02'
    version: 0.2.1
    title: Power Analysis in Experimental Design
    description: Basic functions for power analysis and effect size calculation.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - analysis of experiment 
      - power analysis
    main: 
      - ES.anova.oneway
        - Effect size calculation
        - ES.anova.oneway(data = NULL, sst = NULL, ssb = NULL)
      - ES.chisq.assoc
        - Effect size calculation
        - ES.chisq.assoc(ct = NULL, chisq = NULL, p = NULL, n = NULL, df = NULL, mindf = NULL)
      - ES.chisq.gof
        - Effect size calculation
        - ES.chisq.gof(p1 = NULL, p0 = rep(1/length(p1), length(p1)))
      - ES.proportions
        - Effect size calculation
        - ES.proportions(p1 = NULL, p2 = NULL, alternative = c("two.sided", "one.sided"))
      - ES.t.one
        - Effect size calculation
        - ES.t.one(m = NULL, sd = NULL, n = NULL, t = NULL, se = NULL, df = NULL, mu = NULL, 
        alternative = c("two.sided", "one.sided"))
      - ES.t.paired
        - Effect size calculation
        - ES.t.paired(md = NULL, sd = NULL, n = NULL, t = NULL, se = NULL, df = NULL, 
        alternative = c("two.sided", "one.sided"))
      - ES.t.two
        - Effect size calculation
        - ES.t.two(m1 = NULL, m2 = NULL, sd1 = NULL, sd2 = NULL, n1 = NULL, n2 = NULL, t = NULL, 
        se1 = NULL, se2 = NULL, df = NULL, alternative = c("two.sided", "one.sided"))
      - power.anova.oneway
        - power analysis
        - power.anova.oneway(groups = NULL, n = NULL, f = NULL, power = NULL, sig.level = 0.05)
      - power.chisq
        - power analysis
        - power.chisq(es = NULL, df = NULL, n = NULL, power = NULL, sig.level = NULL)
      - power.plot.chisq
        - power analysis
        - power.plot.chisq(es = NULL, power = NULL, df = NULL, sig.level = NULL, 
        allele = FALSE, xlab = NULL, ylab = NULL, main = NULL, grid = FALSE, type = c("np", "ne"))
      - power.proportions
        - power analysis
        - power.proportions(n = NULL, h = NULL, power = NULL, sig.level = 0.05, 
        type = c("two", "one", "unequal"), ratio = 1)
      - power.t
        - power analysis
        - power.t(es = NULL, n = NULL, power = NULL, sig.level = NULL, ratio = 1, 
        type = c("two", "paired", "one", "unequal"), alternative = c("two.sided", "left", "right"))
    data: 'no'
- acebayes:
    download2020: 12140
    depends: R (>= 3.5.0), lhs
    imports: Rcpp (>= 0.12.9), compare, randtoolbox, parallel
    suggests: ''
    author: Antony M. Overstall, David C. Woods, Maria Adamou & Damianos Michaelides
    date: '2020-10-04'
    version: '1.10'
    title: Optimal Bayesian Experimental Design using the ACE Algorithm
    description: Optimal Bayesian experimental design using the approximate coordinate
      exchange (ACE) algorithm. See <doi:10.18637/jss.v095.i13>.
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v095i13/v95i13.pdf 
    domain: 'general'
    relevance: 'yes'
    type: 
      - optimised design
    main: 
      - ace
        - optimised design 
        - ace(utility, start.d, B, Q = 20, N1 = 20, N2 = 100, lower = -1, upper = 1, limits = NULL, 
        progress = FALSE, binary = FALSE, deterministic = FALSE)
      - pace 
        - optimised design
        - pace(utility, start.d, B, Q = 20, N1 = 20, N2 = 100, lower = -1, upper = 1, limits = NULL, binary = FALSE, 
        deterministic = FALSE, mc.cores = 1, n.assess = 20)
      - aceglm 
        - optimised design
        - aceglm(formula, start.d, family, prior, B, 
        criterion = c("D", "A", "E", "SIG", "NSEL", "SIG-Norm", "NSEL-Norm"), 
        method = c("quadrature", "MC"), Q = 20, N1 = 20, N2 = 100, lower = -1, upper = 1, 
        progress = FALSE, limits = NULL)
      - paceglm 
        - optimised design
        - paceglm(formula, start.d, family, prior, B,
        criterion = c("D", "A", "E", "SIG", "NSEL", "SIG-Norm", "NSEL-Norm"),
        method = c("quadrature", "MC"), Q = 20, N1 = 20, N2 = 100, lower = -1, upper = 1, limits = NULL, 
        mc.cores = 1, n.assess = 20)
      - acnlm 
        - optimised design
        - acenlm(formula, start.d, prior, B, criterion = c("D", "A", "E", "SIG", "NSEL"), 
        method = c("quadrature", "MC"), Q = 20, N1 = 20, N2 = 100, lower = -1, upper = 1, 
        progress = FALSE, limits = NULL)
      - pacenlm 
        - optimised design
        - pacenlm(formula, start.d, prior, B, criterion = c("D", "A", "E", "SIG", "NSEL"), 
        method = c("quadrature", "MC"), Q = 20, N1 = 20, N2 = 100, lower = -1, upper = 1, 
        limits = NULL, mc.cores = 1, n.assess = 20)
    data: 'no'
- desplot:
    download2020: 11957
    depends: ''
    imports: ggplot2, grid, lattice, reshape2,
    suggests: agridat, knitr, rmarkdown, testthat
    author: Kevin Wright [aut, cre]
    date: '2020-10-21'
    version: '1.8'
    title: Plotting Field Plans for Agricultural Experiments
    description: A function for plotting maps of agricultural field experiments that
      are laid out in grids.
    paper: ''
    domain: agriculture
    relevance: 'no'
    type: 
      - visualisation (design)
    main: 
      - desplot
        - design visualisation
        - desplot(data, form = formula(NULL ~ x + y), num = NULL, num.string = NULL, col = NULL, 
        col.string = NULL, text = NULL, text.string = NULL, out1 = NULL, out1.string = NULL,out2 = NULL,
        out2.string = NULL, dq = NULL, dq.string = NULL, col.regions = RedGrayBlue, col.text = NULL,
        text.levels = NULL, out1.gpar = list(col = "black", lwd = 3), 
        out2.gpar = list(col = "yellow", lwd = 1, lty = 1), at, midpoint = "median", ticks = FALSE,
        flip = FALSE, main = NULL, xlab, ylab, shorten = "abb", show.key = TRUE, key.cex, 
        cex = 0.4, strip.cex = 0.75, subset = TRUE, gg = FALSE, ...)
    data: 'no'
- support.CEs:
    download2020: 11900
    depends: ''
    imports: DoE.base, MASS, simex, stats
    suggests: survival
    author: Hideo Aizaki
    date: '2021-01-07'
    version: 0.5-0
    title: Basic Functions for Supporting an Implementation of Choice Experiments
    description: Provides basic functions that support an implementation of (discrete)
      choice experiments (CEs). CEs is a question-based survey method measuring people's
      preferences for goods/services and their characteristics. Refer to Louviere
      et al. (2000) <doi:10.1017/CBO9780511753831> for details on CEs, and Aizaki
      (2012) <doi:10.18637/jss.v050.c02> for the package.
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v050c02/v50c02.pdf
    domain: consumer behaviour 
    relevance: 'yes'
    type: 
      - choice experiments design
    main: 
      - Lma.design
        - choice experiments design
        - Lma.design(candidate.array = NULL, attribute.names, nalternatives, nblocks, 
        row.renames = TRUE, seed = NULL)
      - make.design.matrix
        - choice experiments design
        - make.design.matrix(choice.experiment.design,optout = TRUE, categorical.attributes = NULL, 
        continuous.attributes = NULL, unlabeled = TRUE, common = NULL, binary = FALSE)
      - questionnaire
        - questionairre of choice experiments design
        - questionnaire(choice.experiment.design, common = NULL, quote = TRUE)
      - rotation.design
        - choice experiments design
        - rotation.design(candidate.array = NULL, attribute.names, nalternatives, nblocks, row.renames = TRUE,
        randomize = FALSE, seed = NULL)
    data: 'yes'
- BatchExperiments:
    download2020: 11677
    depends: R (>= 3.0.0), BatchJobs (>= 1.7)
    imports: |-
      backports, utils, stats, checkmate (>= 1.8.5), BBmisc (>=
      1.11), DBI, RSQLite (>= 2.0), data.table (>= 1.9.6)
    suggests: plyr, randomForest, rpart, testthat
    author: Bernd Bischl <bernd_bischl@gmx.net>, Michel Lang <michellang@gmail.com>,
      Olaf Mersmann <olafm@p-value.net>
    date: '2017-11-30'
    version: 1.4.2
    title: Statistical Experiments on Batch Computing Clusters
    description: Extends the BatchJobs package to run statistical experiments on batch
      computing clusters. For further details see the project web page.
    domain: computer experiment 
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v064i11/v64i11.pdf
    relevance: 'yes'
    type: 
      - algortihm abstraction
    main: 
      - makeExperimentRegistry
        - experiment register 
        - makeExperimentRegistry(id = "BatchExperimentRegistry", file.dir, sharding = TRUE, 
        work.dir, multiple.result.files = FALSE, seed, packages = character(0L), 
        src.dirs = character(0L), src.files = character(0L), skip = TRUE)
      - addProblem
        - algortihm abstraction
        - addProblem(reg, id, static = NULL, dynamic = NULL, seed = NULL, overwrite = FALSE)
      - addAlgorithm
        - algortihm abstraction
        - addAlgorithm(reg, id, fun, overwrite = FALSE)
      - makeDesign
        - parameter design for algorithm abstraction
        - makeDesign(id, design = data.frame(), exhaustive = list())
      - addExperiments
        - add experiment 
        - addExperiments(reg, prob.designs, algo.designs, repls = 1L, skip.defined = FALSE)
      - summarizeExperiments
        - experiment result 
        - summarizeExperiments(reg, ids, show = c("prob", "algo"))
      - findExperiments
        - findExperiments(reg, ids, prob.pattern, prob.pars, algo.pattern, algo.pars, 
        repls, match.substring = TRUE, regexp = FALSE)
    data: 'no'
- GAD:
    download2020: 11214
    depends: R (>= 2.7.0), stats, matrixStats, R.methodsS3
    imports: ''
    suggests: ''
    author: Leonardo Sandrini-Neto <leonardosandrini@gmail.com> & Mauricio G. Camargo
    date: '2011-02-21'
    version: 1.1.1
    title: 'GAD: Analysis of variance from general principles'
    description: 'This package analyses complex ANOVA models with any combination
      of orthogonal/nested and fixed/random factors, as described by Underwood (1997).
      There are two restrictions: (i) data must be balanced; (ii) fixed nested factors
      are not allowed. Homogeneity of variances is checked using Cochran''s C test
      and ''a posteriori'' comparisons of means are done using Student-Newman-Keuls
      (SNK) procedure.'
    paper: ''
    domain: 'general'
    relevance: 'no'
    type: 
      - analysis of experiment 
      - modeling
    main: 
      - gad 
        - modeling 
        - gad(object)
      - C.test
        - testing
        - C.test(object) 
      - snk.test
        - modeling 
        - snk.test(object, term, among = NULL, within = NULL)
    data: 'yes'
- bcrm:
    download2020: 11141
    depends: ''
    imports: |-
      graphics, stats, mvtnorm, rlang, ggplot2 (>= 1.0.1), grid,
      knitr
    suggests: BRugs, R2WinBUGS, rjags
    author: Michael Sweeting [aut], Graham Wheeler [aut, cre]
    date: '2019-07-29'
    version: 0.5.4
    title: Bayesian Continual Reassessment Method for Phase I Dose-Escalation Trials
    description: 'Implements a wide variety of one- and two-parameter Bayesian CRM
      designs. The program can run interactively, allowing the user to enter outcomes
      after each cohort has been recruited, or via simulation to assess operating
      characteristics. See Sweeting et al. (2013): <doi:10.18637/jss.v054.i13>.'
    domain: clinical trial
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v054i13/bcrm_Bayesian_Continual_Reassessment_Method_Designs_for_Phase_I_Dose-Finding_Trials.pdf
    relevance: 'yes'
    type: 
      - dose-finding experiment 
      - continual reassessment method 
    main: 
      - bcrm 
        - continual reassessment method, dose-finding 
        - bcrm(stop = list(nmax = NULL, nmtd = NULL, precision = NULL, nmin = NULL, safety = NULL), 
        data = NULL, p.tox0 = NULL, sdose = NULL, dose = NULL, ff, prior.alpha, cohort = 3, target.tox,
        constrain = TRUE, only.below = FALSE, sdose.calculate = "mean", pointest = "plugin", 
        tox.cutpoints = NULL, loss = NULL, start = NULL, simulate = FALSE, nsims = 1, truep = NULL, 
        threep3 = FALSE, threep3.start = 1, threep3.esc.only = FALSE, method = "exact", 
        burnin.itr = 2000, production.itr = 2000, bugs.directory = "c:/Program Files/WinBUGS14/", 
        plot = FALSE, seed = NULL, quietly = 10, file = NULL, N, tox, notox)
    data: 'no'
- ibd:
    download2020: 10962
    depends: R (>= 3.1.1)
    imports: lpSolve, car, emmeans, multcomp
    suggests: multcompView
    author: B N Mandal [aut, cre]
    date: '2019-04-24'
    version: '1.5'
    title: Incomplete Block Designs
    description: A collection of several utility functions related to binary incomplete
      block designs. The package contains function to generate A- and D-efficient
      binary incomplete block designs with given numbers of treatments, number of
      blocks and block size. The package also contains function to generate an incomplete
      block design with specified concurrence matrix. There are functions to generate
      balanced treatment incomplete block designs and incomplete block designs for
      test versus control treatments comparisons with specified concurrence matrix.
      Package also allows performing analysis of variance of data and computing estimated
      marginal means of factors from experiments using a connected incomplete block
      design. Tests of hypothesis of treatment contrasts in incomplete block design
      set up is supported.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - block design 
      - incomplete block design 
    main: 
      - ibd 
        - incomplete block design
        - ibd(v,b,k,NNPo,ntrial,pbar=FALSE)
      - bibd
        - incomplete block design
        - bibd(v,b,r,k,lambda,ntrial,pbar=FALSE)
      - btib
        - incomplete block design
        - btib(v,b,r,r0,k,lambda,lambda0,ntrial=5,pbar=FALSE)
    data: 'yes'
- pid:
    download2020: 10882
    depends: ''
    imports: ggplot2, stats, png, FrF2, DoE.base, FrF2.catlg128
    suggests: MASS
    author: Kevin Dunn [aut, cre]
    date: '2018-11-21'
    version: '0.50'
    title: Process Improvement using Data
    description: 'A collection of scripts and data files for the statistics text:
      "Process Improvement using Data" <https://learnche.org/pid> and the online course
      "Experimentation for Improvement" found on Coursera. The package contains code
      for designed experiments, data sets and other convenience functions used in
      the book.'
    paper: ''
    domain: 'general'
    relevance: 'no'
    type: 
      - book dataset
      - book example 
    main: ''
    data: 'yes'
- mixexp:
    download2020: 10670
    depends: gdata, lattice, grid, daewr
    imports: ''
    suggests: ''
    author: John Lawson [aut, cre] <lawson@byu.edu>, Cameron Willden [aut], Greg Piepel [ctb]
    date: 2016-08-12
    version: 1.2.5
    title: Design and Analysis of Mixture Experiments
    description: Functions for creating designs for mixture experiments, making ternary
      contour plots, and making mixture effect plots.
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v072c02/v72c02.pdf
    domain: 'general'
    relevance: 'yes'
    type: 
      - mixture design
    main: 
      - SLD 
        - mixture design
        - SLD(fac, lev)
      - Xvert
        - mixture design
        - Xvert(nfac=3,uc=c(0,0),lc=c(0,0),nlc=0,lb=c(0,0),ub=c(0,0),coef,ndm=0,plot=TRUE,
          cornerlabs = c("x1","x2","x3"), axislabs = c("x1","x2","x3"), pseudo=TRUE)
    note: 
      - There are also other functions for analysis and visualisation
    data: 'yes'
- desirability:
    download2020: 10628
    depends: ''
    imports: stats, graphics, grDevices
    suggests: lattice
    author: Max Kuhn
    date: '2016-09-22'
    version: '2.1'
    title: Function Optimization and Ranking via Desirability Functions
    description: S3 classes for multivariate optimization using the desirability function
      by Derringer and Suich (1980).
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - optimised design 
      - response-surface design
    main: 
      - dMax
        - optimised design
        - dMax(low, high, scale = 1, toll = NULL, ...)
      - predict.dMax
        - optimised design
        - predict(object, newdata = NA, missing = object$missing, ...)
    data: 'no'
- CombinS:
    download2020: 10624
    depends: ''
    imports: stats, utils
    suggests: ''
    author: Mohamed Laib, Imane Rezgui, Zebida Gheribi-Aoulmi and Herve Monod
    date: '2016-11-22'
    version: 1.1-1
    title: Construction Methods of some Series of PBIB Designs
    description: Series of partially balanced incomplete block designs (PBIB) based
      on the combinatory method (S) introduced in (Imane Rezgui et al, 2014) <doi:10.3844/jmssp.2014.45.48>;
      and it gives their associated U-type design.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - partially balanced incomplete block design
      - incomplete block design  
      - block design 
    main: 
      - CombS
        - block design, incomplete block design 
        - CombS(n, l, s)
    data: 'no'
- FMC:
    download2020: 10547
    depends: ''
    imports: utils, minimalRSD, stats
    suggests: ''
    author: Shwetank Lall [aut, cre], Arpan Bhowmik [ctb], Eldho Varghese [aut], Seema
      Jaggi [ctb], Cini Varghese [ctb]
    date: '2017-03-21'
    version: 1.0.0
    title: Factorial Experiments with Minimum Level Changes
    description: Generate cost effective minimally changed run sequences for symmetrical
      as well as asymmetrical factorial designs.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - factorial design 
    main: 
      - gen.level
        - factorial design 
        - gen.level(x)
      - minimal.factorial
        - factorial design 
        - minimal.factorial(z)
    data: 'no'
- granova:
    download2020: 10327
    depends: R (>= 3.1.1), car (>= 2.0-21)
    imports: ''
    suggests: mgcv, rgl, tcltk, MASS
    author: Robert M. Pruzek <RMPruzek@yahoo.com> and James E. Helmreich <James.Helmreich@Marist.edu>
    date: '2014-08-25'
    version: '2.1'
    title: Graphical Analysis of Variance
    description: This small collection of functions provides what we call elemental
      graphics for display of anova results. The term elemental derives from the fact
      that each function is aimed at construction of graphical displays that afford
      direct visualizations of data with respect to the fundamental questions that
      drive the particular anova methods. The two main functions are granova.1w (a
      graphic for one way anova) and granova.2w (a corresponding graphic for two way
      anova). These functions were written to display data for any number of groups,
      regardless of their sizes (however, very large data sets or numbers of groups
      can be problematic). For these two functions a specialized approach is used
      to construct data-based contrast vectors for which anova data are displayed.
      The result is that the graphics use straight lines, and when appropriate flat
      surfaces, to facilitate clear interpretations while being faithful to the standard
      effect tests in anova. The graphic results are complementary to standard summary
      tables for these two basic kinds of analysis of variance; numerical summary
      results of analyses are also provided as side effects. Two additional functions
      are granova.ds (for comparing two dependent samples), and granova.contr (which
      provides graphic displays for a priori contrasts). All functions provide relevant
      numerical results to supplement the graphic displays of anova data. The graphics
      based on these functions should be especially helpful for learning how the methods
      have been applied to answer the question(s) posed. This means they can be particularly
      helpful for students and non-statistician analysts. But these methods should
      be quite generally helpful for work-a-day applications of all kinds, as they
      can help to identify outliers, clusters or patterns, as well as highlight the
      role of non-linear transformations of data. In the case of granova.1w and granova.ds
      especially, several arguments are provided to facilitate flexibility in the
      construction of graphics that accommodate diverse features of data, according
      to their corresponding display requirements. See the help files for individual
      functions.
    paper: http://moderngraphics11.pbworks.com/f/ElementalGraphics4ANOVA.RP+JH.pdf 
    domain: 'general'
    relevance: 'no'
    type: 
      - analysis of experiment 
      - visualisation 
    main: 
      - granova.1w 
        - visualisation
        - granova.1w(data, group = NULL, dg = 2, h.rng = 1.25, v.rng = 0.2, box = FALSE, 
        jj = 1, kx = 1, px = 1, size.line = -2.5, top.dot = 0.15, trmean = FALSE, resid = FALSE, 
        dosqrs = TRUE, ident = FALSE, pt.lab = NULL, xlab = NULL, ylab = NULL, main = NULL, ...)
      - granova.2w
        - visualisation
        - granova.2w(data, formula = NULL, fit = "linear", ident = FALSE, offset = NULL, ...)
    data: 'yes'
- designGG:
    download2020: 10302
    depends: R (>= 2.2.0)
    imports: ''
    suggests: ''
    author: Yang Li <yang.li@rug.nl>, Morris Swertz <m.a.swertz@rug.nl>, Gonzalo Vera
      <gonzalo.vera.rodriguez@gmail.com>, Rainer Breitling <r.breitling@rug.nl>, Ritsert
      Jansen <r.c.jansen@rug.nl>
    date: 2013-02-19
    version: '1.1'
    title: Computational tool for designing genetical genomics experiments
    description: The package provides R scripts for designing genetical genomics experiments.
    paper: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2706229/pdf/1471-2105-10-188.pdf
    domain: genetics
    relevance: 'yes'
    type: 
      - optimised design 
    main: 
      - designGG
        - optimised design
        - designGG ( genotype, nSlides, nTuple, nEnvFactors, nLevels, Level=NULL, bTwoColorArray=TRUE, 
        initial=NULL, weight=1, region=NULL, optimality="A", method="SA", nIterations=3000, 
        n.search=2, endTemp=1e-10, startTemp=1, maxTempStep=0.9, plotScores=TRUE, directory=NULL, 
        fileName=NULL, envFactorNames=NULL, writingProcess=TRUE )
    data: 'yes'
- MAMS:
    download2020: 10205
    depends: mvtnorm, methods
    imports: ''
    suggests: ''
    author: Thomas Jaki <thomas.jaki@pm.me>, Dominic Magirr <d.magirr@gmail.com>,
      Philip Pallmann <philip.pallmann@gmx.de>
    date: '2021-06-16'
    version: 1.4.2
    title: Designing Multi-Arm Multi-Stage Studies
    description: Designing multi-arm multi-stage studies with (asymptotically) normal
      endpoints and known variance.
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v088i04/v88i04.pdf
    domain: clinical trial
    relevance: 'yes'
    type: 
      - multi-arm multi-stage design 
    main: 
      - mams
        - multi-arm multi-stage design
        - mams(K=4, J=2, alpha=0.05, power=0.9, r=1:2, r0=1:2, p=0.75, p0=0.5, delta=NULL, 
        delta0=NULL, sd=NULL, ushape="obf", lshape="fixed", ufix=NULL, lfix=0, nstart=1, nstop=NULL, 
        sample.size=TRUE, N=20, type="normal")
      - tite.mams
        - multi-arm multi-stage design
        - tite.mams(hr=1.5, hr0=1.1, K=4, J=2, alpha=0.05, power=0.9, r=1:2, r0=1:2, ushape="obf", 
        lshape="fixed", ufix=NULL, lfix=0, nstart=1, nstop=NULL, sample.size=TRUE, N=20)
    data: 'no'
- asd:
    download2020: 10004
    depends: mvtnorm
    imports: ''
    suggests: ''
    author: Nick Parsons
    date: '2016-05-23'
    version: '2.2'
    title: Simulations for Adaptive Seamless Designs
    description: Package runs simulations for adaptive seamless designs with and without
      early outcomes for treatment selection and subpopulation type designs.
    paper: https://onlinelibrary.wiley.com/doi/full/10.1002/bimj.201900020
    domain: clinical trial
    relevance: 'yes'
    type: 
      - adaptive seamless design
      - optimised design
    main: 
      - treatsel.sim
        - adaptive seamless design, optimised design 
        - treatsel.sim(n=list(stage1=32,stage2=32), effect=list(early=c(0,0,0),final=c(0,0,0)),
        outcome=list(early="N",final="N"),nsim=1000, corr=0,seed=12345678,select=0,epsilon=1, 
        weight=NULL,thresh=1,level=0.025,ptest=c(1), method="invnorm",fu=FALSE,file = "")
      - subpop.sim
        - adaptive seamless design, optimised design
        - subpop.sim(n=list(stage1=32,enrich=NULL,stage2=32), effect=list(early=c(0,0),final=c(0, 0)),
        outcome=list(early="N",final="N"), control=list(early=NULL,final=NULL),sprev=0.5, 
        nsim=1000,corr=0,seed=12345678,select="thresh", weight=NULL,selim=NULL,level=0.025,
        method="CT-SD", sprev.fixed=TRUE,file="")
    data: 'no'
- PopED:
    download2020: 9928
    depends: R (>= 2.14)
    imports: |-
      ggplot2, MASS, mvtnorm, dplyr (>= 0.7.0), codetools, stats,
      utils, magrittr, boot, purrr, stringr, tibble, gtools
    suggests: |-
      testthat, Hmisc, nlme, GA, deSolve, Rcpp, shiny,
      rhandsontable, knitr, rmarkdown, gridExtra, covr, devtools,
      mrgsolve
    author: Andrew C. Hooker [aut, cre, trl, cph] , Marco Foracchia [aut] , Eric Stroemberg
      [ctb] , Martin Fink [ctb] , Giulia Lestini [ctb] (Streamlining code, added functionality,
      vignettes), Sebastian Ueckert [aut] (MATLAB version, <https://orcid.org/0000-0002-3712-0255>),
      Joakim Nyberg [aut]
    date: '2021-05-21'
    version: 0.6.0
    title: Population (and Individual) Optimal Experimental Design
    description: Optimal experimental designs for both population and individual studies
      based on nonlinear mixed-effect models. Often this is based on a computation
      of the Fisher Information Matrix. This package was developed for pharmacometric
      problems, and examples and predefined models are available for these types of
      systems. The methods are described in Nyberg et al. (2012) <doi:10.1016/j.cmpb.2012.05.005>,
      and Foracchia et al. (2004) <doi:10.1016/S0169-2607(03)00073-7>.
    paper: https://www.sciencedirect.com/science/article/pii/S0169260703000737?via%3Dihub
    domain: pharmacometrics
    relevance: 'yes'
    type: 
      - optimised design
    main: 
      - "?"
    data: 'no'
- geospt:
    download2020: 9902
    depends: R (>= 2.15.0), gstat, genalg, MASS, sp, minqa
    imports: |-
      limSolve, fields, gsl, plyr, TeachingDemos, sgeostat,
      grDevices, stats, methods, graphics, utils
    suggests: ''
    author: Carlos Melo <cmelo@udistrital.edu.co>, Alí Santacruz, Oscar Melo <oomelom@unal.edu.co>
    date: '2015-08-12'
    version: 1.0-2
    title: Geostatistical Analysis and Design of Optimal Spatial Sampling Networks
    description: Estimation of the variogram through trimmed mean, radial basis functions
      (optimization, prediction and cross-validation), summary statistics from cross-validation,
      pocket plot, and design of optimal sampling networks through sequential and
      simultaneous points methods.
    paper: ''
    domain: geospatial study
    relevance: '?'
    type: 
      - variogram estimation
      - sampling design
      - optimised sampling design
    main: 
      - est.variograms
        - variogram estimation 
        - est.variograms(point.obj, pair.obj, a1, a2, trim)
      - seqPtsOptNet
        - sampling design, optimised sampling design 
        - seqPtsOptNet(formula, loc=NULL, data, fitmodel, BLUE=FALSE, n=1, prevSeqs=NULL, 
        popSize, generations, xmin, ymin, xmax, ymax, plotMap=FALSE, spMap=NULL, ...)
      - simPtsOptNet
        - sampling design, optimised sampling design
        - simPtsOptNet(formula, loc=NULL, data, fitmodel, BLUE=FALSE, n, popSize, generations, 
        xmin, ymin, xmax, ymax, plotMap=FALSE, spMap=NULL, ...)
    data: 'yes'
- JMdesign:
    download2020: 9859
    depends: methods
    imports: ''
    suggests: ''
    author: Emil A. Cornea, Liddy M. Chen, Bahjat F. Qaqish, Haitao Chu, and Joseph
      G. Ibrahim
    date: '2014-10-21'
    version: '1.1'
    title: Joint Modeling of Longitudinal and Survival Data - Power Calculation
    description: Performs power calculations for joint modeling of longitudinal and
      survival data with k-th order trajectories when the variance-covariance matrix,
      Sigma_theta, is unknown.
    paper: ''
    domain: 'general'
    relevance: '?'
    type: 
      - power analysis
    main: 
      - powerLongSurv
        - power analysis 
        - powerLongSurv(N, nevents, tmedian, meantf, p, t, SigmaTheta, sigmae_2, ordtraj, beta = 0, 
        alpha = 0.05, tol = 1.5e-8)
    data: 'no'
- qtlDesign:
    download2020: 9858
    depends: ''
    imports: ''
    suggests: ''
    author: Saunak Sen <sen@biostat.ucsf.edu>, Jaya Satagopan, Karl Broman, and Gary Churchill
    date: '2012-10-29'    
    version: '0.941'
    title: Design of QTL experiments
    description: Tools for the design of QTL experiments
    domain: genetics
    paper: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2366108/pdf/nihms-43556.pdf
    relevance: 'yes'
    type: 
      - quantitative trait locus
    main: 
      - powercalc
        - power calculation 
        - powercalc(cross,n,effect,sigma2,env.var,gen.var,thresh=3,
        sel.frac=1, theta=0,bio.reps=1)
      - detectable
        - effect size calculation
        - detectable(cross,n,effect=NULL,sigma2,env.var,gen.var,power=0.8,
        thresh=3, sel.frac=1,theta=0,bio.reps=1)
      - samplesize
        - sample size calculation
        - samplesize(cross,effect,sigma2,env.var,gen.var,power=0.8,
        thresh=3, sel.frac=1,theta=0,bio.reps=1)
      - info
        - information under H0 calculation 
        - info(sel.frac,theta=0,cross)
      - optspacing
        - optimised design 
        - optspacing(cost,G=NULL,sel.frac,cross)
      - optselection
        - optimised design 
        - optselection(cost,d=0,G=NULL,cross)
      - error.var
        - error calculation 
        - error.var(cross,env.var=1,gen.var=0,bio.reps=1)
      - thresh
        - threshold calculation 
        - thresh(G,cross,type="1",p=c(0.10,0.05,0.01),d=0.01,cov.dim=0,interval=c(1,40))
    data: 'no'
- experiment:
    download2020: 9808
    depends: boot, MASS, R (>= 2.4.0)
    imports: ''
    suggests: ''
    author: Kosuke Imai [aut, cre], Zhichao Jiang [aut], Michael Li [aut]
    date: '2019-08-14'
    version: 1.2.0
    title: R Package for Designing and Analyzing Randomized Experiments
    description: Provides various statistical methods for designing and analyzing
      randomized experiments. One functionality of the package is the implementation
      of randomized-block and matched-pair designs based on possibly multivariate
      pre-treatment covariates. The package also provides the tools to analyze various
      randomized experiments including cluster randomized experiments, two-stage randomized
      experiments, randomized experiments with noncompliance, and randomized experiments
      with missing data.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - randomised design 
    main: 
      - randomize 
        - randomised design 
        - randomize(data, group = c("Treat", "Control"), ratio = NULL, indx = NULL, block = NULL, 
        n.block = NULL, match = NULL, complete = TRUE)
    data: 'yes'
- mkssd:
    download2020: 9805
    depends: R(>= 2.13.0)
    imports: ''
    suggests: ''
    author: B N Mandal <mandal.stat@gmail.com>
    date: '2011-08-04'
    version: '1.1'
    title: Efficient multi-level k-circulant supersaturated designs
    description: mkssd is a package that generates efficient balanced non-aliased
      multi-level k-circulant supersaturated designs by interchanging the elements
      of the generator vector. The package tries to generate a supersaturated design
      that has chisquare efficiency more than user specified efficiency level (mef).
      The package also displays the progress of generation of an efficient multi-level
      k-circulant design through a progress bar. The progress of 100% means that one
      full round of interchange is completed. More than one full round (typically
      4-5 rounds) of interchange may be required for larger designs.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - fractional factorial design
      - multi-level k-circulant supersaturated design
    main: 
      - mkssd 
        - fractional factorial design, multi-level k-circulant supersaturated design
        - mkssd(m,n,q,k,mef)
    data: 'no'
- ssize.fdr:
    download2020: 9768
    depends: ''
    imports: ''
    suggests: ''
    author: Megan Orr, Peng Liu
    date: '2015-02-21'
    version: '1.2'
    title: Sample Size Calculations for Microarray Experiments
    description: This package contains a set of functions that calculates appropriate
      sample sizes for one-sample t-tests, two-sample t-tests, and F-tests for microarray
      experiments based on desired power while controlling for false discovery rates.
      For all tests, the standard deviations (variances) among genes can be assumed
      fixed or random. This is also true for effect sizes among genes in one-sample
      and two sample experiments. Functions also output a chart of power versus sample
      size, a table of power at different sample sizes, and a table of critical test
      values at different sample sizes.
    domain: genetics
    paper: https://journal.r-project.org/archive/2009/RJ-2009-019/RJ-2009-019.pdf
    relevance: '?'
    type:
      - sample size calculation
      - microarray experiment 
    main: 
      - ssize.oneSamp
        - sample size calculation 
        - ssize.oneSamp(delta, sigma, fdr = 0.05, power = 0.8, pi0 = 0.95, maxN = 35, side = "two-sided", 
        cex.title=1.15, cex.legend=1)
      - ssize.oneSampVary
        - sample size calculation
        - ssize.oneSampVary(deltaMean, deltaSE, a, b, fdr = 0.05, power = 0.8, pi0 = 0.95, maxN = 35, 
        side = "two-sided", cex.title=1.15, cex.legend=1)
      - ssize.twoSamp
        - sample size calculation
        - ssize.twoSamp(delta, sigma, fdr = 0.05, power = 0.8, pi0 = 0.95, maxN = 35, side = "two-sided", 
        cex.title=1.15, cex.legend=1)
      - ssize.twoSampVary
        - sample size calculation
        - ssize.twoSampVary(deltaMean, deltaSE, a, b, fdr = 0.05, power = 0.8, pi0 = 0.95, maxN = 35, 
        side = "two-sided", cex.title=1.15, cex.legend=1)
      - ssize.F
        - sample size calculation
        - ssize.F(X, beta, L = NULL, dn, sigma, fdr = 0.05, power = 0.8, pi0 = 0.95, maxN = 20, 
        cex.title=1.15, cex.legend=1)
      - ssize.Fvary
        - sample size calculation
        - ssize.Fvary(X, beta, L = NULL, dn, a, b, fdr = 0.05, power = 0.8, pi0 = 0.95, maxN = 20, 
        cex.title=1.15, cex.legend=1)
    data: 'no'
- dfmta:
    download2020: 9592
    depends: R (>= 3.4.0)
    imports: ''
    suggests: ''
    author: Marie-Karelle Riviere and Jacques-Henri Jourdan
    date: '2020-01-31'
    version: 1.7-1
    title: Phase I/II Adaptive Dose-Finding Design for MTA
    description: 'Phase I/II adaptive dose-finding design for single-agent Molecularly
      Targeted Agent (MTA), according to the paper "Phase I/II Dose-Finding Design
      for Molecularly Targeted Agent: Plateau Determination using Adaptive Randomization",
      Riviere Marie-Karelle et al. (2016) <doi:10.1177/0962280216631763>.'
    paper: https://journals.sagepub.com/doi/10.1177/0962280216631763
    domain: clinical trial
    relevance: 'yes'
    type: 
      - dose-finding experiment
      - randomised design
      - optimised design 
    main: 
      - mtaBin_next
        - optimised design, optimised dose-finding 
        - mtaBin_next(ngroups=1, group_cur=1, ndose, prior_tox, prior_eff, tox_max, eff_min, 
        cohort_start, cohort, final=FALSE, method="MTA-RA", s_1=function(n_cur){0.2}, s_2=0.07, 
        group_pat, id_dose, toxicity, tite=TRUE, efficacy, seed = 8)
      - mtaBin_sim
        - randomised design 
        - mtaBin_sim(ngroups=1, ndose, p_tox, p_eff, tox_max, eff_min, prior_tox, prior_eff, 
        poisson_rate=1, n, cohort_start=3, cohort=3, tite=TRUE, time_full, method="MTA-RA", 
        s_1=function(n_cur){0.2}, s_2=0.07, cycle, nsim, c_tox=0.90, c_eff=0.40, seed=8, threads=0)
    data: 'no'
- DiceEval:
    download2020: 9564
    depends: DiceKriging
    imports: ''
    suggests: gam, akima, mda, polspline
    author: D. Dupuy and C. Helbert
    date: '2020-05-04'
    version: '1.5'
    title: Construction and Evaluation of Metamodels
    description: 'Estimation, validation and prediction of models of different types
      : linear models, additive models, MARS,PolyMARS and Kriging.'
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v065i11/v65i11.pdf
    domain: computer experiment 
    relevance: 'no'
    type:
      - modeling 
    main: 
      - modelFit 
        - model fitting 
        - modelFit (X,Y, type, ...)
      - modelPredict 
        - model prediction 
        - modelPredict(model,newdata)
      - crossValidation 
        - model selection 
        - crossValidation(model, K)
      - modelComparison 
        - model selection
        - modelComparison(X,Y, type="all",K=10,test=NULL,...)
    data: 'yes'
- ALTopt:
    download2020: 9534
    depends: R (>= 3.0.0)
    imports: cubature (>= 1.0), lattice (>= 0.20), methods
    suggests: ''
    author: Kangwon Seo <seoka@missouri.edu> [aut, cre], Rong Pan [aut]
    date: '2019-12-12'
    version: 0.1.2
    title: Optimal Experimental Designs for Accelerated Life Testing
    description: Creates the optimal (D, U and I) designs for the accelerated life
      testing with right censoring or interval censoring. It uses generalized linear
      model (GLM) approach to derive the asymptotic variance-covariance matrix of
      regression coefficients. The failure time distribution is assumed to follow
      Weibull distribution with a known shape parameter and log-linear link functions
      are used to model the relationship between failure time parameters and stress
      variables. The acceleration model may have multiple stress factors, although
      most ALTs involve only two or less stress factors. ALTopt package also provides
      several plotting functions including contour plot, Fraction of Use Space (FUS)
      plot and Variance Dispersion graphs of Use Space (VDUS) plot. For more details,
      see Seo and Pan (2015) <doi:10.32614/RJ-2015-029>.
    paper: https://journal.r-project.org/archive/2015/RJ-2015-029/RJ-2015-029.pdf
    domain: 'general'
    relevance: 'yes'
    type: 
      - optimised design 
      - accelerated life testing 
    main: 
      - altopt.ic
        - optimised design
        - altopt.ic( optType, N, t, k, nf, alpha, formula, coef, useCond, useLower, useUpper, nOpt = 1,
        nKM = 30, nCls = NULL)
      - altopt.rc
        - optimised design
        - altopt.rc( optType, N, tc, nf, alpha, formula, coef, useCond, useLower, useUpper, 
        nOpt = 1, nKM = 30, nCls = NULL)
    data: 'no'
- choiceDes:
    download2020: 9526
    depends: R (>= 2.15.2), AlgDesign
    imports: ''
    suggests: ''
    author: Jack Horne  <jack@jackhorne.net> [aut, cre]
    date: '2018-06-18'
    version: 0.9-3
    title: Design Functions for Choice Studies
    description: Design functions for DCMs and other types of choice studies (including
      MaxDiff and other tradeoffs).
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - choice experiments design
      - optimised design 
    main: 
      - dcm.design
        - optimised design
        - dcm.design(cand, nb, sets, alts, fname=NULL, Rd=20, print=TRUE)
      - dcm.design.cand
        - optimised design 
        - dcm.design.cand(cand, nb, sets, alts, fname=NULL, Rd=20, print=TRUE)
    data: 'no'
- TEQR:
    download2020: 9479
    depends: ''
    imports: ''
    suggests: ''
    author: M. Suzette Blanchard
    date: '2016-02-02'
    version: 6.0-0
    title: Target Equivalence Range Design
    description: The TEQR package contains software to calculate the operating characteristics
      for the TEQR and the ACT designs.The TEQR (toxicity equivalence range) design
      is a toxicity based cumulative cohort design with added safety rules. The ACT
      (Activity constrained for toxicity) design is also a cumulative cohort design
      with additional safety rules. The unique feature of this design is that dose
      is escalated based on lack of activity rather than on lack of toxicity and is
      de-escalated only if an unacceptable level of toxicity is experienced.
    domain: clinical trial
    paper: https://www.sciencedirect.com/science/article/pii/S1551714410001710?via%3Dihub
    relevance: 'yes'
    type: 
      - dose-finding experiment 
      - target equivalence range design 
      - activity constrained for toxicity
    main: 
      - teqrDG
        - dose-finding, target equivalence range design 
        - teqrDG(TotalN,pTarget,eq1,eq2,tootoxic)
      - teqrOCact
        - target equivalence range design, activity constrained for toxicity
        - teqrOCact(sim,firstdose,proba,probc,cohortSize,MaxNoCohorts,
        RP2Dss,pTarget,eq1,eq2,tootoxic,toxcon,llactivity)
      - teqrOCtox
        - target equivalence range design
        - teqrOCtox(sim,firstdose,probt,cohortSize,MaxNoCohorts,MTDss,pTarget,eq1,eq2,tootoxic)
    data: 'no'
- designmatch:
    download2020: 9452
    depends: R (>= 3.2), lattice, MASS, slam, Rglpk
    imports: ''
    suggests: ''
    author: Jose R. Zubizarreta <zubizarreta@hcp.med.harvard.edu>, Cinar Kilcioglu
      <ckilcioglu16@gsb.columbia.edu>, Juan P. Vielma <jvielma@mit.edu>
    date: '2018-06-18'
    version: 0.3.1
    title: Matched Samples that are Balanced and Representative by Design
    description: Includes functions for the construction of matched samples that are
      balanced and representative by design. Among others, these functions can be
      used for matching in observational studies with treated and control units, with
      cases and controls, in related settings with instrumental variables, and in
      discontinuity designs. Also, they can be used for the design of randomized experiments,
      for example, for matching before randomization. By default, 'designmatch' uses
      the 'GLPK' optimization solver, but its performance is greatly enhanced by the
      'Gurobi' optimization solver and its associated R interface. For their installation,
      please follow the instructions at <http://user.gurobi.com/download/gurobi-optimizer>
      and <http://www.gurobi.com/documentation/7.0/refman/r_api_overview.html>. We
      have also included directions in the gurobi_installation file in the inst folder.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - sampling design 
      - randomised design
      - optimised design 
    main: 
      - bmatch 
        - sampling design, optimised design 
        - match(t_ind, dist_mat = NULL, subset_weight = NULL, n_controls = 1, total_groups = NULL, 
        mom = NULL, ks = NULL, exact = NULL, near_exact = NULL, fine = NULL, near_fine = NULL, near = NULL, far = NULL, solver = NULL)
      - nmatch
        - sampling design, randomised design, optimised design 
        - nmatch(dist_mat, subset_weight = NULL, total_pairs = NULL, mom = NULL, exact = NULL, 
        near_exact = NULL, fine = NULL, near_fine = NULL, near = NULL, far = NULL, solver = NULL)
    data: 'yes'
- minimalRSD:
    download2020: 9334
    depends: ''
    imports: utils, stats
    suggests: ''
    author: Shwetank Lall <shwetanklall@gmail.com> [aut, cre], Eldho Varghese [aut], Seema Jaggi [ctb], Cini
      Varghese [ctb], Arpan Bhowmik [ctb]
    date: '2017-01-04'
    version: 1.0.0
    title: Minimally Changed CCD and BBD
    description: Generate central composite designs (CCD)with full as well as fractional
      factorial points (half replicate) and Box Behnken designs (BBD) with minimally
      changed run sequence.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type:
      - response-surface design
      - factorial design
      - fractional factorial design 
      - optimised design 
    main: 
      - min_bbd
        - response-surface design, optimised design
        - min_bbd(k)
      - min_ccd
        - response-surface design, factorial design
        - min_ccd(k)
      - min_ccd_2
        - response-surface design, fractional factorial design 
        - min_ccd_2(k)
    data: 'no'
- SLHD:
    download2020: 9321
    depends: ''
    imports: ''
    suggests: ''
    author: Shan Ba <shanbatr@gmail.com>
    date: '2015-01-26'
    version: 2.1-1
    title: Maximin-Distance (Sliced) Latin Hypercube Designs
    description: Generate the optimal Latin Hypercube Designs (LHDs) for computer
      experiments with quantitative factors and the optimal Sliced Latin Hypercube
      Designs (SLHDs) for computer experiments with both quantitative and qualitative
      factors. Details of the algorithm can be found in Ba, S., Brenneman, W. A. and
      Myers, W. R. (2015), "Optimal Sliced Latin Hypercube Designs," Technometrics.
      Important function in this package is "maximinSLHD".
    domain: computer experiment
    paper: https://www.asc.ohio-state.edu/statistics/comp_exp//jour.club/optimal_sliced_lhd_ba2015.pdf
    relevance: 'yes'
    type: 
      - latin hypercube design 
      - optimised design 
    main: 
      - maximinSLHD
        - latin hypercube design, optimised design
        - maximinSLHD(t, m, k, power = 15, nstarts = 1, itermax = 100, total_iter = 1e+06)
    data: 'no'
- skpr:
    download2020: 9318
    depends: R (>= 3.0.2), shiny
    imports: |-
      utils, iterators, stats, lme4, Rcpp (>= 0.11.0), rintrojs,
      shinythemes, foreach, doParallel, survival, doRNG, future,
      promises, shinyjs, car, viridis, magrittr, lmerTest, methods,
      lazyeval, progress, gt, scales
    suggests: testthat
    author: Tyler Morgan-Wall [aut, cre], George Khoury [aut]
    date: '2021-05-11'
    version: 0.66.5
    title: 'Design of Experiments Suite: Generate and Evaluate Optimal Designs'
    description: Generates and evaluates D, I, A, Alias, E, T, and G optimal designs.
      Supports generation and evaluation of blocked and split/split-split/.../N-split
      plot designs. Includes parametric and Monte Carlo power evaluation functions,
      and supports calculating power for censored responses. Provides a framework
      to evaluate power using functions provided in other packages or written by the
      user. Includes a Shiny graphical user interface that displays the underlying
      code used to create and evaluate the design to improve ease-of-use and make
      analyses more reproducible.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - optimised design
      - power analysis
    main: 
      - gen_design
        - optimised design
        - gen_design(candidateset, model, trials, splitplotdesign = NULL, blocksizes = NULL, 
        optimality = "D", augmentdesign = NULL, repeats = 20, custom_v = NULL, varianceratio = 1,
        contrast = contr.simplex, aliaspower = 2, minDopt = 0.8, k = NA, parallel = FALSE,
        timer = TRUE, add_blocking_columns = FALSE, randomized = TRUE, advancedoptions = NULL)
      - eval_design
        - power analysis 
        - eval_design(design, model = NULL, alpha = 0.05, blocking = NULL, anticoef = NULL, 
        effectsize = 2, varianceratios = NULL, contrasts = contr.sum, conservative = FALSE, 
        reorder_factors = FALSE, detailedoutput = FALSE, advancedoptions = NULL, ...)
      - eval_design_mc
        - power analysis
        - eval_design_mc(design, model = NULL, alpha = 0.05, blocking = NULL, nsim = 1000, 
        glmfamily = "gaussian", calceffect = TRUE, varianceratios = NULL, rfunction = NULL, 
        anticoef = NULL, effectsize = 2, contrasts = contr.sum, parallel = FALSE, 
        detailedoutput = FALSE, advancedoptions = NULL, ...)
      - eval_design_survival_mc
        - power analysis 
        - eval_design_survival_mc(design,model = NULL, alpha = 0.05, nsim = 1000, distribution = "gaussian",
        censorpoint = NA, censortype = "right", rfunctionsurv = NULL, anticoef = NULL, effectsize = 2,
        contrasts = contr.sum, parallel = FALSE, detailedoutput = FALSE, advancedoptions = NULL, ...)
      - eval_design_custom_mc
        - power analysis 
        - eval_design_custom_mc(design, model = NULL, alpha = 0.05, nsim, rfunction, fitfunction, 
        pvalfunction, anticoef, effectsize = 2, contrasts = contr.sum, coef_function = coef, 
        parameternames = NULL, parallel = FALSE, parallelpackages = NULL, ...)
    data: 'no'
- plgp:
    download2020: 9272
    depends: R (>= 2.4), mvtnorm, tgp
    imports: ''
    suggests: ellipse, splancs, akima
    author: Robert B. Gramacy <rbgramacy@chicagobooth.edu>
    date: '2014-11-27'
    version: 1.1-7
    title: Particle Learning of Gaussian Processes
    description: Sequential Monte Carlo inference for fully Bayesian Gaussian process
      (GP) regression and classification models by particle learning (PL). The sequential
      nature of inference and the active learning (AL) hooks provided facilitate thrifty
      sequential design (by entropy) and optimization (by improvement) for classification
      and regression models, respectively. This package essentially provides a generic
      PL interface, and functions (arguments to the interface) which implement the
      GP models and AL heuristics. Functions for a special, linked, regression/classification
      GP model and an integrated expected conditional improvement (IECI) statistic
      is provides for optimization in the presence of unknown constraints. Separable
      and isotropic Gaussian, and single-index correlation functions are supported.
      See the examples section of ?plgp and demo(package="plgp") for an index of demos
    paper: https://arxiv.org/pdf/0909.5262.pdf
    domain: 'general'
    relevance: '?'
    type:
      - modeling 
      - model optimisation
    main: 
      - PL
        - modeling, model optimisation
        - PL(dstream, start, end, init, lpredprob, propagate, prior = NULL, addpall = NULL, params = NULL, 
        save = NULL, P = 100, progress = 10, cont = FALSE, verb = 1)
    data: 'no'
- dfpk:
    download2020: 9231
    depends: R (>= 3.4.0), Rcpp (>= 0.12.11), rstan (>= 2.18.1)
    imports: |-
      ggplot2 (>= 2.0.0), dfcrm, methods, stats, graphics,
      grDevices, PK
    suggests: ''
    author: Artemis Toumazi [cre, aut], Sarah Zohar [aut], Moreno Ursino [aut], Trustees
      of Columbia University [cph] , French National Institute of Health and Medical
      Research [cph]
    date: '2018-11-07'
    version: 3.5.1
    title: Bayesian Dose-Finding Designs using Pharmacokinetics (PK) for Phase I Clinical
      Trials
    description: Statistical methods involving PK measures are provided, in the dose
      allocation process during a Phase I clinical trials. These methods, proposed
      by Ursino et al, (2017) <doi:10.1002/bimj.201600084>, enter pharmacokinetics
      (PK) in the dose finding designs in different ways, including covariates models,
      dependent variable or hierarchical models. This package provides functions to
      generate data from several scenarios and functions to run simulations which
      their objective is to determine the maximum tolerated dose (MTD).
    paper: https://www.sciencedirect.com/science/article/pii/S0169260717308349 
    domain: clinical trial, pharmacokinetics
    relevance: 'yes'
    type: 
      - dose-finding experiment 
    main: 
      - sim.data
        - dose-finding
        - sim.data(PKparameters, omegaIIV, omegaAlpha, sigma, doses, limitTox, timeSampling, N, TR, seed=190591)
      - nsim 
        - dose-finding 
        - nsim(doses, N, cohort, icon, theta, model, simulatedData, TR, prob = 0.9, AUCmethod = 2, options = list(nchains = 4, niter = 4000, 
        nadapt = 0.8), betapriors = NULL, thetaL=NULL, p0 = 0, L = 0, CI = FALSE, seed = 190591)
      - nextDose 
        - dose-finding 
        - extDose(model, y, AUCs, doses, x, theta, options, prob = 0.9, betapriors = NULL, 
        thetaL = NULL, p0 = NULL, L = NULL, deltaAUC = NULL, CI = TRUE)
    data: 'no'
- dfcomb:
    download2020: 9212
    depends: R (>= 3.2.3)
    imports: ''
    suggests: ''
    author: Marie-Karelle Riviere and Jacques-Henri Jourdan
    date: '2019-02-25'
    version: 3.0-0
    title: Phase I/II Adaptive Dose-Finding Design for Combination Studies
    description: Phase I/II adaptive dose-finding design for combination studies where
      toxicity rates are supposed to increase with both agents.
    domain: clinical trial 
    paper: https://www.sciencedirect.com/science/article/pii/S0169260715002783?via%3Dihub
    relevance: 'yes'
    type: 
      - dose-finding experiment 
    main: 
      - CombIncrease_nex
        - dose-finding 
        - CombIncrease_next(ndose_a1, ndose_a2, target, target_min, target_max, prior_tox_a1, 
        prior_tox_a2, cohort, final, pat_incl, dose_adm1, dose_adm2, tite=FALSE, toxicity, 
        time_full=0, time_tox=0, time_follow=0, c_e=0.85, c_d=0.45, c_stop=0.95, c_t=0.5, c_over=0.25, 
        cmin_overunder=2, cmin_mtd=3, cmin_recom=1, early_stop=1, alloc_rule=1, nburn=2000, niter=5000)
      - CombIncrease_sim
        - dose-finding 
        - CombIncrease_sim(ndose_a1, ndose_a2, p_tox, target, target_min, target_max, prior_tox_a1, 
        prior_tox_a2, n_cohort, cohort, tite=FALSE, time_full=0, poisson_rate=0, nsim, c_e=0.85, 
        c_d=0.45, c_stop=0.95, c_t=0.5, c_over=0.25, cmin_overunder=2, cmin_mtd=3, cmin_recom=1, 
        startup=1, alloc_rule=1, early_stop=1, nburn=2000, niter=5000, seed=14061991)
    data: 'no'
- GroupSeq:
    download2020: 9178
    depends: ''
    imports: tcltk
    suggests: testthat
    author: Roman Pahl [aut, cre]
    date: '2018-04-11'
    version: 1.3.5
    title: A GUI-Based Program to Compute Probabilities Regarding Group Sequential
      Designs
    description: A graphical user interface to compute group sequential designs based
      on normally distributed test statistics, particularly critical boundaries, power,
      drift, and confidence intervals of such designs. All computations are based
      on the alpha spending approach by Lan-DeMets with various alpha spending functions
      being available to choose among.
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - group sequential design 
    main: 
      - groupseq 
        - group sequential design, GUI 
        - groupseq(mode = "g")
    data: ''
- binseqtest:
    download2020: 9113
    depends: methods, graphics, stats, clinfun
    imports: ''
    suggests: ''
    author: Jenn Kirk, Michael P. Fay
    date: '2016-12-15'
    version: 1.0.3
    title: Exact Binary Sequential Designs and Analysis
    description: For a series of binary responses, create stopping boundary with exact
      results after stopping, allowing updating for missing assessments.
    paper: https://www.tandfonline.com/doi/abs/10.1080/00031305.2014.951126
    domain: 'general'
    relevance: 'no'
    type: 
      - analysis of experiment
      - hypohothesis testing 
    main: 
      - designAb
        - hypohothesis testing
        - designAb(Nk, a = NULL, b = NULL, theta0 = NULL, tsalpha = NULL, alternative = "two.sided", 
        conf.level = 0.95, binding = "both")
      - designOBF
        - hypohothesis testing
        - designOBF(Nmax,theta0 = 0.5, k = Inf, tsalpha = NULL, alternative = "two.sided", 
        conf.level = 0.95, binding = "both")
      - designOBFpower
        - optimised hypohothesis testing
        - designOBFpower(theta0 = 0.5, theta1=.6, k=Inf, power=.9, tsalpha = NULL, 
        alternative = "two.sided", conf.level = 0.95, binding = "both", allNgreater=FALSE, 
        checkmax=10, maxNmax=2*ss)
      - designFixed
        - hypohothesis testing
        - designFixed(Nmax, theta0 = 0.5, tsalpha = NULL, alternative = "two.sided", conf.level = 0.95)
      - designFixedpower
        - optimised hypohothesis testing
        - designFixedpower(theta0 = 0.5, theta1 = 0.6, power = 0.8,
        maxNmax = Inf, tsalpha = NULL, alternative = NULL, conf.level = 0.95, allNgreater = FALSE)
      - designSimon
        - hypohothesis testing
        - designSimon(theta0, theta1, alpha = 0.05, beta = 0.2, type = c("optimal", "minimax"), nmax=100)
    data: 'no'
- mxkssd:
    download2020: 9108
    depends: R(>= 2.13.0)
    imports: ''
    suggests: ''
    author: B N Mandal <mandal.stat@gmail.com>
    date: '2011-08-05'
    version: '1.1'
    title: Efficient mixed-level k-circulant supersaturated designs
    description: mxkssd is a package that generates efficient balanced mixed-level
      k-circulant supersaturated designs by interchanging the elements of the generator
      vector. The package tries to generate a supersaturated design that has EfNOD
      efficiency more than user specified efficiency level (mef). The package also
      displays the progress of generation of an efficient mixed-level k-circulant
      design through a progress bar. The progress of 100 per cent means that one full
      round of interchange is completed. More than one full round (typically 4-5 rounds)
      of interchange may be required for larger designs.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - fractional factorial design
      - mixed-level k-circulant supersaturated design
    main: 
      - mxkssd
        - mixed-level k-circulant supersaturated design
        - mxkssd(m,n,level_vec,k,mef)
    data: 'no'
- ICAOD:
    download2020: 9088
    depends: R (>= 3.1.3)
    imports: |-
      Rcpp, nloptr, stats, utils, graphics, grDevices, cubature, sn,
      mnormt, methods, mvQuad
    suggests: rgl, lattice, R.rsp
    author: Ehsan Masoudi <esn_mud@yahoo.com> [aut, cre], Heinz Holling [aut], Weng Kee Wong [aut], Seongho
      Kim [ctb]
    date: '2020-10-11'
    version: 1.0.1
    title: Optimal Designs for Nonlinear Statistical Models by Imperialist Competitive
      Algorithm (ICA)
    description: Finds optimal designs for nonlinear models using a metaheuristic
      algorithm called Imperialist Competitive Algorithm (ICA). See, for details,
      Masoudi et al. (2017) <doi:10.1016/j.csda.2016.06.014> and Masoudi et al. (2019)
      <doi:10.1080/10618600.2019.1601097>.
    paper: http://rmirror.lau.edu.lb/web/packages/ICAOD/vignettes/ICAOD.pdf
    domain: 'general'
    relevance: 'yes'
    type: 
      - optimised design
    main: 
      - locally 
        - optimised design
        - locally(formula, predvars, parvars, family = gaussian(), lx, ux, iter, k, inipars, fimfunc = NULL,
        ICA.control = list(), sens.control = list(), initial = NULL, npar = length(inipars), 
        plot_3d = c("lattice", "rgl"), x = NULL,crtfunc = NULL, sensfunc = NULL)
      - bayes 
        - optimised design
        - bayes(formula, predvars, parvars, family = gaussian(), prior, lx, ux, iter, k, fimfunc = NULL,
        ICA.control = list(), sens.control = list(), crt.bayes.control = list(), 
        sens.bayes.control = list(), initial = NULL, npar = NULL, plot_3d = c("lattice", "rgl"), x = NULL,
        crtfunc = NULL, sensfunc = NULL)
      - robust 
        - optimised design
        - robust(formula, predvars, parvars, family = gaussian(), lx, ux, iter, k, prob, parset, 
        fimfunc = NULL, ICA.control = list(), sens.control = list(), initial = NULL, npar = dim(parset)[2],
        plot_3d = c("lattice", "rgl"), x = NULL, crtfunc = NULL, sensfunc = NULL)
      - minimax 
        - optimised design
        - minimax(formula, predvars, parvars, family = gaussian(), lx, ux, lp, up, iter, k, n.grid = 0,
        fimfunc = NULL, ICA.control = list(), sens.control = list(), sens.minimax.control = list(), 
        crt.minimax.control = list(), standardized = FALSE, initial = NULL, localdes = NULL, 
        npar = length(lp), plot_3d = c("lattice", "rgl"), x = NULL, crtfunc = NULL, sensfunc = NULL)
    data: 'no'
- PGM2:
    download2020: 9066
    depends: ''
    imports: stats
    suggests: ''
    author: Mohamed Laib, Abla Boudraa and Zebida Gheribi-Aoulmi
    date: '2016-12-17'
    version: 1.0-1
    title: Nested Resolvable Designs and their Associated Uniform Designs
    description: Construction method of nested resolvable designs from a projective
      geometry defined on Galois field of order 2. The obtained Resolvable designs
      are used to build uniform design. The presented results are based on <https://eudml.org/doc/219563>
      and A. Boudraa et al. (See references).
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - block design 
      - resolvable design
      - space filling 
    main: 
      - BIB 
        - block design
        - BIB(m)
      - Resolvable
        - block design, resolvable design
        - Resolvable(n, mat)
      - Uniform
        - space filling design 
        - Uniform(mat)
    data: 'no'
- dynaTree:
    download2020: 9062
    depends: R (>= 2.14.0), methods
    imports: ''
    suggests: akima, tgp, plgp, MASS
    author: Robert B. Gramacy <rbgramacy@chicagobooth.edu>, Matt A. Taddy <taddy@chicagobooth.edu>
      and Christoforos Anagnostopoulos <christoforos.anagnostopoulos06@imperial.ac.uk>
    date: '2017-03-13'
    version: 1.2-10
    title: Dynamic Trees for Learning and Design
    description: Inference by sequential Monte Carlo for dynamic tree regression and
      classification models with hooks provided for sequential design and optimization,
      fully online learning with drift, variable selection, and sensitivity analysis
      of inputs. Illustrative examples from the original dynamic trees paper are facilitated
      by demos in the package; see demo(package="dynaTree").
    paper: https://arxiv.org/pdf/0912.1586.pdf
    domain: 'general'
    relevance: '?'
    type: 
      - modeling 
      - model optimisation 
    main: 
      - dynaTrees
        - object with several methods for modeling 
    data: 'yes'
- MBHdesign:
    download2020: 9051
    depends: ''
    imports: mgcv, geometry, randtoolbox, mvtnorm, stats, class, parallel
    suggests: fields, graphics, knitr, spsurvey, MASS
    author: Scott D. Foster
    date: '2020-08-25'
    version: 2.1.8
    title: Spatial Designs for Ecological and Environmental Surveys
    description: Provides spatially balanced designs from a set of (contiguous) potential
      sampling locations in a study region for point-based and for transect-based
      surveys. Accommodates, without detrimental effects on spatial balance, sites
      that the researcher wishes to include in the survey for reasons other than the
      current randomisation (legacy sites).
    paper: ''
    domain: geospatial study, ecological and environmental study 
    relevance: 'yes'
    type: 
      - spatially balanced design 
      - survey design 
    main: 
      - alterInclProbs
        - spatially balanced design 
        - alterInclProbs( legacy.sites, potential.sites=NULL, n=NULL, inclusion.probs=NULL, mc.cores=1, sigma=NULL)
      - quasiSamp
        - spatially balanced design
        - quasiSamp( n, dimension=2, study.area=NULL, potential.sites=NULL, inclusion.probs=NULL, randStartType=2, nSampsToConsider=5000)
    data: 'no'
- OptGS:
    download2020: 8874
    depends: ''
    imports: ''
    suggests: ''
    author: James Wason [aut, cre], John Burkardt [ctb]
    date: '2015-09-14'
    version: 1.1.1
    title: Near-Optimal and Balanced Group-Sequential Designs for Clinical Trials
      with Continuous Outcomes
    description: Functions to find near-optimal multi-stage designs for continuous
      outcomes.
    domain: clinical trial 
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v066i02/v66i02.pdf
    relevance: 'yes'
    type: 
      - group sequential design 
      - optimised design
    main: 
      - optgs
        - group sequential design, optimised design
        - optgs(delta0 = 0, delta1 = 1/3, J = 2, sigma = 1, sd.known = TRUE, alpha = 0.05, 
        power = 0.9, weights = c(0.95, 0, 0, 0.05), initial = NULL)
    data: 'no'
- PBIBD:
    download2020: 8871
    depends: ''
    imports: ''
    suggests: ''
    author: Parneet Kaur <parneet.nonu93@gmail.com>, Kush Sharma <kush.vashishtha@gmail.com>,
      Davinder Kumar Garg <dkgarg_stat@yahoo.co.in>
    date: '2017-12-20'
    version: '1.3'
    title: Partially Balanced Incomplete Block Designs
    description: The PBIB designs are important type of incomplete block designs having
      wide area of their applications for example in agricultural experiments, in
      plant breeding, in sample surveys etc. This package constructs various series
      of PBIB designs and assists in checking all the necessary conditions of PBIB
      designs and the association scheme on which these designs are based on. It also
      assists in calculating the efficiencies of PBIB designs with any number of associate
      classes. The package also constructs Youden-m square designs which are Row-Column
      designs for the two-way elimination of heterogeneity. The incomplete columns
      of these Youden-m square designs constitute PBIB designs. With the present functionality,
      the package will be of immense importance for the researchers as it will help
      them to construct PBIB designs, to check if their PBIB designs and association
      scheme satisfy various necessary conditions for the existence, to calculate
      the efficiencies of PBIB designs based on any association scheme and to construct
      Youden-m square designs for the two-way elimination of heterogeneity. R. C.
      Bose and K. R. Nair (1939) <http://www.jstor.org/stable/40383923>.
    paper: ''
    domain: agriculture
    relevance: 'yes'
    type: 
      - block design 
      - incomplete block design 
      - partially balanced incomplete block design
    main: 
      - series1
        - partially balanced incomplete block design
        - series1(n)
      - series2
        - partially balanced incomplete block design
        - series2(n)
      - series3
        - partially balanced incomplete block design
        - series3(n)
      - series4
        - partially balanced incomplete block design
        - series4(m, n)
      - series5
        - partially balanced incomplete block design
        - series5(m, n)
      - series6
        - partially balanced incomplete block design
        - series6(m, n)
    data: 'no'
- DiceView:
    download2020: 8805
    depends: |-
      methods, utils, stats, grDevices, graphics, DiceKriging,
      DiceEval
    imports: DiceDesign, R.cache, geometry, scatterplot3d
    suggests: ''
    author: Yann Richet <yann.richet@rsn.fr>, Yves Deville, Clement Chevalier
    date: '2020-11-27'
    version: 2.0-1
    title: Methods for Visualization of Computer Experiments Design and Surrogate
    description: View 2D/3D sections, contour plots, mesh of excursion sets for computer
      experiments designs, surrogates or test functions.
    paper: ''
    domain: computer experiment
    relevance: 'no'
    type: 
      - visualisation (design)
    main: 
      - "?"
    data: 'no'
- RPPairwiseDesign:
    download2020: 8801
    depends: ''
    imports: ''
    suggests: ''
    author: Mohamed Laib <laib.med@gmail.com>, Imane Rezgui and Zebida Gheribi-Aoulmi
    date: '2015-01-19'
    version: '1.0'
    title: Resolvable partially pairwise balanced design and Space-filling design
      via association scheme
    description: Using some association schemes to obtain a new series of resolvable
      partially pairwise balanced designs (RPPBD) and space-filling designs.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - resolvable design 
      - space filling 
    main: 
      - PPGrectRightAng4
        - resolvable design 
        - PPGrectRightAng4(n, l, w)
      - PPGrectRightAng5
        - resolvable design 
        - PPGrectRightAng5(n, l, w)
      - PPGrectRightAng7
        - resolvable design 
        -  PPGrectRightAng7(n, l, w)
      - SpaceFilling 
        - space filling 
        - SpaceFilling(asch)
    data: 'no'
- toxtestD:
    download2020: 8756
    depends: ''
    imports: ''
    suggests: ''
    author: Nadia Keddig and Werner Wosniok
    date: '2014-11-12'
    version: '2.0'
    title: Experimental design for binary toxicity tests
    description: Calculates sample size and dose allocation for binary toxicity tests,
      using the Fish Embryo Toxicity Test as example. An optimal test design is obtained
      by running (i) spoD (calculate the number of individuals to test under control
      conditions), (ii) setD (estimate the minimal sample size per treatment given
      the users precision requirements) and (iii) doseD (construct an individual dose
      scheme).
    domain: toxicity test, environmental science, toxicology research
    paper: https://enveurope.springeropen.com/articles/10.1186/s12302-015-0046-5
    relevance: 'yes'
    type: 
      - dose-finding experiment 
      - sample size calculation
    main: 
      - spoD
        - sample size calculation
        - spoD(n = 500, SL.p = 5, SLmin = NA, SLmax = NA, bio.sd.p = 2.008, maxCI = 2.5, analysis = FALSE, 
        SLdataset = NA, print.result = "01_spontaneous lethality.txt")
      - setD 
        - sample size calculation
        - setD(nmax, SL.p, immunity.p = 0, risk.type = 2, target.EC.p = 10, plot = FALSE, alpha.p = 5, 
        beta.p = 20, print.result = "02.sample size.txt")
      - doseD
        - dose-finding 
        - doseD(DP, immunity.p = 0, SL.p = 0, target.EC.p = 10, nconc = 8, text = TRUE, risk.type = 2, 
        print.result = "03.dosestrategy.txt")
    data: 'no'
- bioOED:
    download2020: 8718
    depends: ''
    imports: |-
      FME (>= 1.3.2), bioinactivation (>= 1.1.2), corrplot(>= 0.73),
      dplyr (>= 0.5.0), ggplot2 (>= 2.1.0), stats (>= 3.3.2),
      graphics(>= 3.3.2), MEIGOR (>= 1.0.0), rlang (>= 0.1.6), tidyr
      (>= 0.7.2), tidyverse(>= 1.2.1), tidyselect(>= 0.2.5)
    suggests: knitr (>= 1.9), testthat (>= 0.9.1), rmarkdown (>= 1.12)
    author: Alberto Garre [aut, cre], Jose Lucas Penalver-Soto [aut], Pablo S. Fernandez
      [aut], Jose A. Egea [aut]
    date: '2019-08-07'
    version: 0.2.1
    title: Sensitivity Analysis and Optimum Experiment Design for Microbial Inactivation
    description: Extends the bioinactivation package with functions for Sensitivity
      Analysis and Optimum Experiment Design.
    paper: https://www.sciencedirect.com/science/article/pii/S0963996919306003?via%3Dihub
    domain: microbiology
    relevance: 'yes'
    type: 
      - optimised design 
    main: 
      - inactivation_OED
        - optimised design
        - inactivation_OED(inactivation_model, parms, temp_profile, parms_fix, n_points, criteria = "D", 
        n_times = 100, sensvar = "logN", optim_algorithm = "global", opts_global = NULL)
      - inactivation_OED_penalty
        - optimised design 
        - inactivation_OED_penalty(inactivation_model, parms, temp_profile, parms_fix, n_points, 
        time_min, criteria = "D", n_times = 100, sensvar = "logN", optim_algorithm = "global", opts_global = NULL, ...)
      - isothermal_OED
        - optimised design 
        - isothermal_OED(model, pars, n_points, min_time, max_time, min_temp, max_temp, 
        criterion = "D", opts = NULL)
      - isothermal_OED_limit
        - optimised design
        - isothermal_OED_limit(model, pars, limit, n_points, min_time, max_time, min_temp, 
        max_temp, criterion = "D", opts = NULL, x_0 = NULL)
    data: 'no'
- EngrExpt:
    download2020: 8493
    depends: R (>= 2.9.0), lattice
    imports: ''
    suggests: ''
    author: R port by Douglas Bates <bates@stat.wisc.edu> and Karen A.F. Copeland
      <karen@boulderstats.com>
    date: '2009-08-21'
    version: 0.1-8
    title: Data sets from "Introductory Statistics for Engineering Experimentation"
    description: Datasets from Nelson, Coffin and Copeland "Introductory Statistics
      for Engineering Experimentation" (Elsevier, 2003) with sample code.
    paper: ''
    domain: 'general'
    relevance: 'no'
    type: 
      - data container package 
      - book dataset
    main: ''
    data: 'yes'
- docopulae:
    download2020: 8265
    depends: R (>= 3.1.2)
    imports: graphics, grDevices, methods, stats, utils
    suggests: |-
      copula, numDeriv, Deriv (>= 3.8.5), cubature, SparseGrid,
      mvtnorm, testthat
    author: Andreas Rappold [aut, cre]
    date: '2018-10-26'
    version: 0.4.0
    title: Optimal Designs for Copula Models
    description: A direct approach to optimal designs for copula models based on the
      Fisher information. Provides flexible functions for building joint PDFs, evaluating
      the Fisher information and finding optimal designs. It includes an extensible
      solution to summation and integration called 'nint', functions for transforming,
      plotting and comparing designs, as well as a set of tools for common low-level
      tasks.
    paper: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4936440/ 
    domain: 'general'
    relevance: 'no'
    type: 
      - modeling 
      - model optimisation 
    main: 
      - Dsensitivity
        - model optimisation
        - Dsensitivity(A = NULL, parNames = NULL, defaults = list(x = NULL, desw = NULL, desx = NULL, 
        mod = NULL))
      - Wynn
        - model optimisation
        - Wynn(sensF, tol, maxIter = 10000)
    data: 'no'
- MaxPro:
    download2020: 8157
    depends: nloptr
    imports: ''
    suggests: ''
    author: Shan Ba  <shanbatr@gmail.com> and V. Roshan Joseph
    date: '2018-09-27'
    version: 4.1-2
    title: Maximum Projection Designs
    description: 'Generate maximum projection (MaxPro) designs for quantitative and/or
      qualitative factors. Details of the MaxPro criterion can be found in: (1) Joseph,
      Gul, and Ba. (2015) "Maximum Projection Designs for Computer Experiments", Biometrika,
      102, 371-380, and (2) Joseph, Gul, and Ba. (2018) "Designing Computer Experiments
      with Multiple Types of Factors: The MaxPro Approach", Journal of Quality Technology,
      to appear.'
    paper: https://www.osti.gov/servlets/purl/1405144
    domain: computer experiment 
    relevance: 'yes'
    type: 
      - space filling 
      - optimised design
      - maximum projection design
    main: 
      - MaxProLHD
        - maximum projection design
        - MaxProLHD(n, p, s=2, temp0=0, nstarts = 1, itermax = 400, total_iter = 1e+06)
      - MaxPro
        - maximum projection design, optimised design 
        - MaxPro(InitialDesign,s=2,iteration=10)
      - MaxProQQ
        - maximum projection design
        - MaxProQQ(InitialDesign, p_nom=0, temp0=0, nstarts=1, itermax=400, total_iter=1e+06)
      - MaxProAugment 
        - maximum projection design
        - MaxProAugment(ExistDesign, CandDesign, nNew, p_disnum=0, l_disnum=NULL, p_nom=0, l_nom=NULL)
      - MaxProRunOrder 
        - optimised design 
        - MaxProRunOrder(Design,p_nom=0,initial_row=1)
      - MaxProMeasure 
        - maximum projection design
        - MaxProMeasure(Design, p_nom=0)
    data: 'no'
- crmPack:
    download2020: 8058
    depends: R (>= 3.0.0), ggplot2 (>= 2.0.0), graphics
    imports: |-
      methods, grid, gridExtra, GenSA, mvtnorm, parallel, rjags,
      utils, tools, MASS
    suggests: ggmcmc, knitr, Rcpp, RcppArmadillo
    author: Daniel Sabanes Bove [aut], Wai Yin Yeung [aut], Giuseppe Palermo [aut,
      cre], Thomas Jaki [aut]
    date: '2019-06-13'
    version: 1.0.0
    title: Object-Oriented Implementation of CRM Designs
    description: Implements a wide range of model-based dose escalation designs, ranging
      from classical and modern continual reassessment methods (CRMs) based on dose-limiting
      toxicity endpoints to dual-endpoint designs taking into account a biomarker/efficacy
      outcome. The focus is on Bayesian inference, making it very easy to setup a
      new design with its own JAGS code. However, it is also possible to implement
      3+3 designs for comparison or models with non-Bayesian estimation. The whole
      package is written in a modular form in the S4 class system, making it very
      flexible for adaptation to new models, escalation or stopping rules.
    domain: clinical trial 
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v089i10/v89i10.pdf
    relevance: 'yes'
    type: 
      - continual reassessment methods
      - dose-finding experiment 
    main: 
      - "?"
    data: 'no'
- OPDOE:
    download2020: 8005
    depends: gmp
    imports: mvtnorm, orthopolynom, nlme, crossdes, polynom
    suggests: ''
    author: Petr Simecek <simecek@gmail.com>, Juergen Pilz <juergen.pilz@aau.at>,
      Mingui Wang <mail.mwang@gmail.com>, Albrecht Gebhardt <albrecht.gebhardt@aau.at>.
    date: '2018-03-17'
    version: 1.0-10
    title: Optimal Design of Experiments
    description: Several function related to Experimental Design are implemented here,
      see "Optimal Experimental Design with R" by Rasch D. et. al (ISBN 9781439816974).
    paper: https://www.jstatsoft.org/article/view/v043b05/v43b05.pdf
    domain: 'general'
    relevance: 'yes'
    type: 
      - optimised design
      - analysis of experiment 
    main: 
      - "?"
    data: 'yes'
- DoE.MIParray:
    download2020: 7847
    depends: ''
    imports: stats, methods, combinat, DoE.base
    suggests: slam (>= 0.1-9), Matrix (>= 1.1.0)
    author: Ulrike Groemping
    date: '2019-07-13'
    version: '0.13'
    title: Creation of Arrays by Mixed Integer Programming
    description: '''CRAN'' packages ''DoE.base'' and ''Rmosek'' and non-''CRAN'' package
      ''gurobi'' are enhanced with functionality for the creation of optimized arrays
      for experimentation, where optimization is in terms of generalized minimum aberration.
      It is also possible to optimally extend existing arrays to larger run size.
      Optimization requires the availability of at least one of the commercial products
      ''Gurobi'' or ''Mosek'' (free academic licenses available for both). For installing
      ''Gurobi'' and its R package ''gurobi'', follow instructions at <http://www.gurobi.com/downloads/gurobi-optimizer>
      and <http://www.gurobi.com/documentation/7.5/refman/r_api_overview.html> (or
      higher version). For installing ''Mosek'' and its R package ''Rmosek'', follow
      instructions at <https://www.mosek.com/downloads/> and <http://docs.mosek.com/8.1/rmosek/install-interface.html>,
      or use the functionality in the stump CRAN R package ''Rmosek''.'
    domain: industrial experiment 
    paper: https://openresearchsoftware.metajnl.com/article/10.5334/jors.286/
    relevance: 'yes'
    type: 
      - optimised design
      - factorial design 
    main: 
      - gurobi_MIParray 
        - factorial design
        - gurobi_MIParray(nruns, nlevels, resolution = 3, kmax = max(resolution, 2), distinct = TRUE, 
        detailed = 0, start=NULL, forced=NULL, maxtime = 60, nthread = 2, heurist=0.5, MIQCPMethod=0, 
        MIPFocus=1, gurobi.params = list(BestObjStop = 0.5, LogFile=""))
      - mosek_MIParray
        - factroial design 
        - mosek_MIParray(nruns, nlevels, resolution = 3, kmax = max(resolution, 2), distinct = TRUE, 
        detailed = 0, start=NULL, forced=NULL, maxtime = Inf, nthread=2, 
        mosek.opts = list(verbose = 10, soldetail = 1), 
        mosek.params = list(dparam = list(LOWER_OBJ_CUT = 0.5, 
        MIO_TOL_ABS_GAP = 0.2, INTPNT_CO_TOL_PFEAS = 1e-05, INTPNT_CO_TOL_INFEAS = 1e-07), 
        iparam = list(PRESOLVE_LINDEP_USE="OFF", LOG_MIO_FREQ=100)))
      - gurobi_MIPsearch
        - optimised design
        - gurobi_MIPsearch(nruns, nlevels, resolution = 3, maxtime = 60, stopearly=TRUE, listout=FALSE, 
        orders=NULL, distinct = TRUE, detailed = 0, start=NULL, forced=NULL, nthread = 2, heurist=0.5, 
        MIQCPMethod=0, MIPFocus=1, gurobi.params = list(BestObjStop = 0.5, OutputFlag=0))
      - mosek_MIPsearch
        - optimised design
        - mosek_MIPsearch(nruns, nlevels, resolution = 3, maxtime = 60, stopearly=TRUE, listout=FALSE, 
        orders=NULL, distinct = TRUE, detailed = 0, start=NULL, forced=NULL, nthread=2, 
        mosek.opts = list(verbose = 1, soldetail = 1), 
        mosek.params = list(dparam = list(LOWER_OBJ_CUT = 0.5, MIO_TOL_ABS_GAP = 0.2, 
        INTPNT_CO_TOL_PFEAS = 1e-05, INTPNT_CO_TOL_INFEAS = 1e-07), 
        iparam = list(PRESOLVE_LINDEP_USE="OFF", LOG_MIO_FREQ=100)))
      - gurobi_MIPcontinue
        - optimised design
        - gurobi_MIPcontinue(qco, improve = TRUE, maxtime = 60, nthread = 2, heurist = 0.05, 
        MIQCPMethod = 0, MIPFocus = 0, gurobi.params =list(BestObjStop = 0.5, LogFile=""))
      - mosek_MIPcontinue
        - optimised design
        - mosek_MIPcontinue(qco, improve = TRUE, maxtime = Inf, nthread = 2, 
        mosek.opts = list(verbose = 10, soldetail = 1), 
        mosek.params = list(dparam = list(LOWER_OBJ_CUT = 0.5, MIO_TOL_ABS_GAP = 0.2, 
        INTPNT_CO_TOL_PFEAS = 1e-05, INTPNT_CO_TOL_INFEAS = 1e-07),
        iparam = list(PRESOLVE_LINDEP_USE="OFF", LOG_MIO_FREQ=100)))
    data: 'no'
- ssizeRNA:
    download2020: 7831
    depends: R (>= 3.2.3)
    imports: |-
      MASS, Biobase, edgeR, limma, qvalue, ssize.fdr, graphics,
      stats
    suggests: knitr
    author: Ran Bi [aut, cre], Peng Liu [aut], Tim Triche [ctb]
    date: '2019-08-15'
    version: 1.3.2
    title: Sample Size Calculation for RNA-Seq Experimental Design
    description: We propose a procedure for sample size calculation while controlling
      false discovery rate for RNA-seq experimental design. Our procedure depends
      on the Voom method proposed for RNA-seq data analysis by Law et al. (2014) <DOI:10.1186/gb-2014-15-2-r29>
      and the sample size calculation method proposed for microarray experiments by
      Liu and Hwang (2007) <DOI:10.1093/bioinformatics/btl664>. We develop a set of
      functions that calculates appropriate sample sizes for two-sample t-test for
      RNA-seq experiments with fixed or varied set of parameters. The outputs also
      contain a plot of power versus sample size, a table of power at different sample
      sizes, and a table of critical test values at different sample sizes. To install
      this package, please use 'source("http://bioconductor.org/biocLite.R"); biocLite("ssizeRNA")'.
      For R version 3.5 or greater, please use 'if(!requireNamespace("BiocManager",
      quietly = TRUE)){install.packages("BiocManager")}; BiocManager::install("ssizeRNA")'.
    paper: https://pubmed.ncbi.nlm.nih.gov/27029470/
    domain: genetics, genome sequencing
    relevance: '?'
    type: 
      - sample size calculation
      - microarray experiment 
    main: 
      - ssize.twoSampVaryDelta
        - sample size calculation
        - ssize.twoSampVaryDelta(deltaMean, deltaSE, sigma, fdr = 0.05, power = 0.8, pi0 = 0.95, 
        maxN = 35, side = "two-sided", cex.title = 1.15, cex.legend = 1)
      - ssizeRNA_single
        - sample size calculation
        - ssizeRNA_single(nGenes = 10000, pi0 = 0.8, m = 200, mu, disp, fc, up = 0.5, replace = TRUE, 
        fdr = 0.05, power = 0.8, maxN = 35, side = "two-sided", cex.title = 1.15, cex.legend = 1)
      - ssizeRNA_vary
        - sample size calculation
        - ssizeRNA_vary(nGenes = 10000, pi0 = 0.8, m = 200, mu, disp, fc, up = 0.5, replace = TRUE, 
        fdr = 0.05, power = 0.8, maxN = 35, side = "two-sided", cex.title = 1.15, cex.legend = 1)
    data: 'yes'
- easypower:
    download2020: 7814
    depends: ''
    imports: pwr (>= 1.1-3)
    suggests: knitr
    author: Aaron McGarvey
    date: '2015-11-04'
    version: 1.0.1
    title: Sample Size Estimation for Experimental Designs
    description: Power analysis is used in the estimation of sample sizes for experimental
      designs. Most programs and R packages will only output the highest recommended
      sample size to the user. Often the user input can be complicated and computing
      multiple power analyses for different treatment comparisons can be time consuming.
      This package simplifies the user input and allows the user to view all of the
      sample size recommendations or just the ones they want to see. The calculations
      used to calculate the recommended sample sizes are from the 'pwr' package.
    paper: ''
    domain: 'general'
    relevance: '?'
    type: 
      - sample size calculation
    main: 
      - n.multiway
        - sample size calculation
        - n.multiway(iv1 = NULL, iv2 = NULL, iv3 = NULL, iv4 = NULL, interaction.eta2 = "small", 
        sig.level = 0.05, power = 0.8, result = "all", ...)
      - n.oneway
        - sample size calculation
        - n.oneway(iv = iv, sig.level = 0.05, power = 0.8)
    data: 'no'
- gset:
    download2020: 7725
    depends: R (>= 3.0.2), Hmisc, mvtnorm, MCMCpack, graphics
    imports: ''
    suggests: ''
    author: Fang Liu [aut, cre]
    date: '2014-11-16'
    version: 1.1.0
    title: Group Sequential Design in Equivalence Studies
    description: calculate equivalence and futility boundaries based on the exact
      bivariate $t$ test statistics for group sequential designs in studies with equivalence
      hypotheses.
    domain: equivalence studies
    paper: https://journal.r-project.org/archive/2014/RJ-2014-033/RJ-2014-033.pdf
    relevance: 'yes'
    type: 
      - group sequential design 
    main: 
      - equivonly
        - group sequential design
        - equivonly(l, u, sigma, n1, n2, t.vec, type1, gamma = -4, crange = c(-10, 10), plot = TRUE, ll = 3, ul = 6, n.sim = 10000, seed = NULL)
      - nonbinding
        - group sequential design
        - nonbinding(l, u, theta, sigma, n1, n2, t.vec, type1, type2, gamma = rep(-4, 2), 
        crange = c(-10, 10), drange = c(-10, 10), force = TRUE, plot = TRUE, ll = 3, ul = 6, 
        n.sim = 10000, seed = NULL)
      - binding 
        - group sequential design
        - binding(l, u, theta, sigma, n1, n2, t.vec, type1, type2, gamma = rep(-4, 2), 
        crange = c(-10, 10), drange = c(-10, 10), force = TRUE, plot = TRUE,
        ll = 3, ul = 6, n.sim = 10000, seed = NULL)
      - nminmax
        - sample size calculation 
        - nminmax(l, u, theta, sigma, n1.lower, n2.lower, t.vec, type1, type2, gamma = rep(-4, 2), 
        binding = FALSE, n1.upper = ceiling(2 * n1.lower), n2.upper = ceiling(2 * n2.lower), 
        n.sim = 10000, seed = NULL)
    data: 'no'
- hiPOD:
    download2020: 7636
    depends: rgl
    imports: ''
    suggests: ''
    author: Wei E. Liang
    date: '2012-04-27'
    version: '1.0'
    title: hierarchical Pooled Optimal Design
    description: Based on hierarchical modeling, this package provides a few practical
      functions to find and present the optimal designs for a pooled NGS design.
    paper: ''
    domain: genetics, genome sequencing 
    relevance: 'yes'
    type: 
      - optimised design 
    main: 
      - FindOptPower
        - optimised design 
        - FindOptPower(cost, sample.size, MAF, OR, error, costPerExp = 18915, costPerPool = 970, 
        costPerX = 300, lower.P, upper.P)
      - PlotOptPower
        - optimised design, design visualisation 
        - PlotOptPower(opt.design.results, save.contour = FALSE, contour.filename = NA, plot.3d = TRUE)
      - ShowOptDesign
        - optimised design 
        - ShowOptDesign(opt.design.results, num.designs = 10)
    data: 'yes'
- LDOD:
    download2020: 7612
    depends: R (>= 2.10.0), Rsolnp, Rmpfr
    imports: ''
    suggests: ''
    author: Ehsan Masoudi, Majid Sarmad and Hooshang Talebi
    date: '2013-02-25'
    version: '1.0'
    title: Finding Locally D-optimal optimal designs for some nonlinear and generalized
      linear models
    description: this package provides functions for Finding Locally D-optimal designs
      for Logistic, Negative Binomial, Poisson, Michaelis-Menten, Exponential, Log-Linear,
      Emax, Richards, Weibull and Inverse Quadratic regression models and also functions
      for auto-constructing Fisher information matrix and Frechet derivative based
      on some input variables and without user-interfere.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - optimised design
    main: 
      - ldemax
        - optimised design
        - ldemax(a, b, c, lb, ub, user.points = NULL, user.weights = NULL, ..., n.restarts = 1, 
        n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
      - ldexpdose
        - optimised design
        - ldexpdose(a, b, c, lb, ub, user.points = NULL, user.weights = NULL, ..., n.restarts = 1, 
        n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
      - ldiq
        - optimised design
        - ldiq(a, b, c, form, lb, ub, user.points = NULL, user.weights = NULL, ..., n.restarts = 1, 
        n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
      - ldlogistic
        - optimised design
        - ldlogistic(a, b, form = 1 , lb, ub, user.points = NULL, user.weights = NULL, ..., 
        n.restarts = 1, n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
      - ldloglin
        - optimised design
        - ldloglin(a, b, c, lb, ub, user.points = NULL, user.weights = NULL, ..., n.restarts = 1, 
        n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
      - ldmm 
        - optimised design
        - ldmm(a, b, form = 1, lb, ub, user.points = NULL, user.weights = NULL, ..., n.restarts = 1, 
        n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
      - ldnbinom
        - optimised design
        - ldnbinom(a, b, theta, lb, ub, user.points = NULL, user.weights = NULL, ..., n.restarts = 1, 
        n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
      - ldpoisson 
        - optimised design
        - ldpoisson(a, b, form = 1, lb, ub, user.points = NULL, user.weights = NULL, ..., n.restarts = 1, 
        n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
      - ldrichards
        - optimised design
        - ldrichards(a, b, lambda, h, lb, ub, user.points = NULL, user.weights = NULL, ..., 
        n.restarts = 1, n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
      - ldweibull 
        - optimised design
        - ldweibull(a, b, lambda, h, lb, ub, user.points = NULL, user.weights = NULL, ..., 
        n.restarts = 1, n.sim = 1, tol = 1e-8, prec = 53, rseed = NULL)
    data: 'no'
- odr:
    download2020: 7595
    depends: |-
      R (>= 3.3.0), stats (>= 3.0.0), graphics (>= 3.0.0), base(>=
      3.0.0)
    imports: ''
    suggests: knitr, rmarkdown
    author: Zuchao Shen [aut, cre], Ben Kelcey [aut]
    date: 2020-03-13
    version: 1.0.2
    title: Optimal Design and Statistical Power of Multilevel Randomized Trials
    description: 'Calculate the optimal sample allocation that produces smallest variance
      of a treatment effect or the highest statistical power for experimental studies
      under a budget constraint, perform power analyses with and without accommodating
      cost structures of sampling, and calculate the relative efficiency between two
      sample allocations. The references for the proposed methods are: (1) Shen, Z.
      (2019). Optimal sample allocation in multilevel Experiments. (Doctoral dissertation).
      University of Cincinnati, Cincinnati, OH. (2) Shen, Z., & Kelcey, B. (in press).
      Optimal sample allocation under unequal costs in cluster-randomized trials.
      Journal of Educational and Behavioral Statistics. (3) Champely., S. (2018).
      pwr: Basic functions for power analysis (Version 1.2-2) [Software]. Available
      from <https://CRAN.R-project.org/package=pwr>.'
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - randomised design 
      - optimised design 
      - sample size calculation 
      - power analysis
    main: 
      - od.1
        - optimised design 
        - od.1(p = NULL, r12 = NULL, c1 = NULL, c1t = NULL, m = NULL, plots = TRUE, plim = NULL, 
        varlim = NULL, plab = NULL, varlab = NULL, vartitle = NULL, verbose = TRUE)
      - od.2
        - optimised design 
        - od.2(n = NULL, p = NULL, icc = NULL, r12 = NULL, r22 = NULL, c1 = NULL, c2 = NULL, 
        c1t = NULL, c2t = NULL, m = NULL, plots = TRUE, plot.by = NULL, nlim = NULL, plim = NULL, varlim = NULL, nlab = NULL, plab = NULL, varlab = NULL, vartitle = NULL, verbose = TRUE)
      - od.2m
        - optimised design 
        - od.2m(n = NULL, p = NULL, icc = NULL, r12 = NULL, r22m = NULL, c1 = NULL, c2 = NULL, 
        c1t = NULL, omega = NULL, m = NULL, plots = TRUE, plot.by = NULL, nlim = NULL, plim = NULL, varlim = NULL, nlab = NULL, plab = NULL, varlab = NULL, vartitle = NULL, verbose = TRUE, iter = 100, tol = 1e-10)
      - od.3
        - optimised design
        - od.3(n = NULL, J = NULL, p = NULL, icc2 = NULL, icc3 = NULL, r12 = NULL, r22 = NULL, 
        r32 = NULL, c1 = NULL, c2 = NULL, c3 = NULL, c1t = NULL, c2t = NULL, c3t = NULL, m = NULL, 
        plots = TRUE, plot.by = NULL, nlim = NULL, Jlim = NULL, plim = NULL, varlim = NULL, nlab = NULL, 
        Jlab = NULL, plab = NULL, varlab = NULL, vartitle = NULL, verbose = TRUE, iter = 100, tol = 1e-10)
      - od.3m
        - optimised design 
        - od.3m(n = NULL, J = NULL, p = NULL, icc2 = NULL, icc3 = NULL, r12 = NULL, r22 = NULL, 
        r32m = NULL, c1 = NULL, c2 = NULL, c3 = NULL, c1t = NULL, c2t = NULL, omega = NULL, 
        m = NULL, plots = TRUE, plot.by = NULL, nlim = NULL, Jlim = NULL, plim = NULL, varlim = NULL, 
        nlab = NULL, Jlab = NULL, plab = NULL, varlab = NULL, vartitle = NULL, verbose = TRUE, 
        iter = 100, tol = 1e-10)
      - od.4
        - optimised design 
        - od.4(n = NULL, J = NULL, K = NULL, p = NULL, icc2 = NULL, icc3 = NULL, icc4 = NULL, r12 = NULL, 
        r22 = NULL, r32 = NULL, r42 = NULL, c1 = NULL, c2 = NULL, c3 = NULL, c4 = NULL, c1t = NULL, 
        c2t = NULL, c3t = NULL, c4t = NULL, m = NULL, plots = TRUE, plot.by = NULL, nlim = NULL, 
        Jlim = NULL, Klim = NULL, plim = NULL, varlim = NULL, nlab = NULL, Jlab = NULL, Klab = NULL, 
        plab = NULL, varlab = NULL, vartitle = NULL, verbose = TRUE, iter = 100, tol = 1e-10)
      - od.4m
        - optimised design
        - od.4m(n = NULL, J = NULL, K = NULL, p = NULL, icc2 = NULL, icc3 = NULL, icc4 = NULL, r12 = NULL, 
        r22 = NULL, r32 = NULL, r42m = NULL, c1 = NULL, c2 = NULL, c3 = NULL, c4 = NULL, c1t = NULL, 
        c2t = NULL, c3t = NULL, omega = NULL, m = NULL, plots = TRUE, plot.by = NULL, nlim = NULL, 
        Jlim = NULL, Klim = NULL, plim = NULL, varlim = NULL, nlab = NULL, Jlab = NULL, Klab = NULL, 
        plab = NULL, varlab = NULL, vartitle = NULL, verbose = TRUE, iter = 100, tol = 1e-10)
      - power.1
        - power analysis 
        - power.1(cost.model = TRUE, expr = NULL, constraint = NULL, sig.level = 0.05, two.tailed = TRUE, 
        d = NULL, power = NULL, m = NULL, n = NULL, p = NULL, r12 = NULL, q = NULL, c1 = NULL, c1t = NULL, 
        dlim = NULL, powerlim = NULL, nlim = NULL, mlim = NULL, rounded = TRUE)
      - power.2
        - power analysis
        - power.2(cost.model = TRUE, expr = NULL, constraint = NULL, sig.level = 0.05, two.tailed = TRUE, 
        d = NULL, power = NULL, m = NULL, n = NULL, J = NULL, p = NULL, icc = NULL, r12 = NULL, r22 = NULL, 
        q = NULL, c1 = NULL, c2 = NULL, c1t = NULL, c2t = NULL, dlim = NULL, powerlim = NULL,
        Jlim = NULL, mlim = NULL, rounded = TRUE)
      - power.2m
        - power analysis 
        - power.2m(cost.model = TRUE, expr = NULL, constraint = NULL, sig.level = 0.05, two.tailed = TRUE, 
        d = NULL, power = NULL, m = NULL, n = NULL, J = NULL, p = NULL, icc = NULL,
        r12 = NULL, r22m = NULL, q1 = NULL, q2 = NULL, c1 = NULL, c2 = NULL, c1t = NULL, omega = NULL, 
        dlim = NULL, powerlim = NULL, Jlim = NULL, mlim = NULL, rounded = TRUE)
      - power.3
        - power analysis
        - power.3(cost.model = TRUE, expr = NULL, constraint = NULL, sig.level = 0.05, two.tailed = TRUE, 
        d = NULL, power = NULL, m = NULL, n = NULL, J = NULL, K = NULL, p = NULL, icc2 = NULL, icc3 = NULL, 
        r12 = NULL, r22 = NULL, r32 = NULL, q = NULL, c1 = NULL, c2 = NULL, c3 = NULL, c1t = NULL,
        c2t = NULL, c3t = NULL, dlim = NULL, powerlim = NULL, Klim = NULL, mlim = NULL, rounded = TRUE)
      - power.3m 
        - power analysis
        - power.3m(cost.model = TRUE, expr = NULL, constraint = NULL, sig.level = 0.05, 
        two.tailed = TRUE, d = NULL, power = NULL, m = NULL, n = NULL, J = NULL, K = NULL, p = NULL,
        icc2 = NULL, icc3 = NULL, r12 = NULL, r22 = NULL, r32m = NULL, q2 = NULL, q3 = NULL, c1 = NULL, 
        c2 = NULL, c3 = NULL, c1t = NULL, c2t = NULL, omega = NULL, dlim = NULL,
        powerlim = NULL, Klim = NULL, mlim = NULL, rounded = TRUE)
      - power.4 
        - power analysis
        - power.4(cost.model = TRUE, expr = NULL, constraint = NULL, sig.level = 0.05, two.tailed = TRUE, 
        d = NULL, power = NULL, m = NULL, n = NULL, J = NULL, K = NULL, L = NULL, p = NULL, icc2 = NULL, 
        icc3 = NULL, icc4 = NULL, r12 = NULL, r22 = NULL, r32 = NULL, r42 = NULL, q = NULL, c1 = NULL, 
        c2 = NULL, c3 = NULL, c4 = NULL, c1t = NULL, c2t = NULL, c3t = NULL, c4t = NULL, dlim = NULL, 
        powerlim = NULL, Llim = NULL, mlim = NULL, rounded = TRUE)
      - power.4m 
        - power analysis 
        - power.4m(cost.model = TRUE, expr = NULL, constraint = NULL, sig.level = 0.05, two.tailed = TRUE, 
        d = NULL, power = NULL, m = NULL, n = NULL, J = NULL, K = NULL, L = NULL, p = NULL, icc2 = NULL, 
        icc3 = NULL, icc4 = NULL, r12 = NULL, r22 = NULL, r32 = NULL, r42m = NULL, q3 = NULL, q4 = NULL, 
        c1 = NULL, c2 = NULL, c3 = NULL, c4 = NULL, c1t = NULL, c2t = NULL, c3t = NULL, omega = NULL, 
        dlim = NULL, powerlim = NULL, Llim = NULL, mlim = NULL, rounded = TRUE)
    data: 'no'
- OptimalDesign:
    download2020: 7512
    depends: R (>= 3.1.1)
    imports: grDevices, graphics, Matrix, lpSolve, matrixStats, matrixcalc, plyr, quadprog, rgl, stats, utils
    suggests: ''
    author: Radoslav Harman, Lenka Filova
    date: '2019-12-02'
    version: 1.0.1
    title: A Toolbox for Computing Efficient Designs of Experiments
    description: Algorithms for D-, A-, I-, and c-optimal designs. Some of the functions
      in this package require the 'gurobi' software and its accompanying R package.
      For their installation, please follow the instructions at <https://www.gurobi.com>
      and the file gurobi_inst.txt, respectively.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - optimised design
    main: 
      - "?"
    data: 'no'
- vdg:
    download2020: 7377
    depends: R (>= 3.4.0), parallel, ggplot2, quantreg
    imports: proxy, splines, gridExtra, grDevices, methods, stats, utils
    suggests: rsm, Vdgraph, AlgDesign, knitr, lhs
    author: Pieter Schoonees  <schoonees@gmail.com> [aut, cre, cph], Niel le Roux [ctb]
    date: '2020-12-16'
    version: 1.2.1
    title: Variance Dispersion Graphs and Fraction of Design Space Plots
    description: Facilities for constructing variance dispersion graphs, fraction-
      of-design-space plots and similar graphics for exploring the properties of experimental
      designs. The design region is explored via random sampling, which allows for
      more flexibility than traditional variance dispersion graphs. A formula interface
      is leveraged to provide access to complex model formulae. Graphics can be constructed
      simultaneously for multiple experimental designs and/or multiple model formulae.
      Instead of using pointwise optimization to find the minimum and maximum scaled
      prediction variance curves, which can be inaccurate and time consuming, this
      package uses quantile regression as an alternative.
    paper: ''
    domain: 'general'
    relevance: 'no'
    type: 
      - visualisation (design)
      - variance dispersion graph 
    main: 
      - spv 
        - variance calculation 
        - spv(n, design, type = "spherical", formula, at = FALSE, keepfun, sample, unscaled = FALSE, ...)
    data: 'yes'
- pipe.design:
    download2020: 7249
    depends: ''
    imports: ggplot2 (>= 1.0.1), gtools, xtable
    suggests: shiny
    author: Michael Sweeting
    date: '2017-06-16'
    version: 0.5.1
    title: Dual-Agent Dose Escalation for Phase I Trials using the PIPE Design
    description: Implements the Product of Independent beta Probabilities dose Escalation
      (PIPE) design for dual-agent Phase I trials as described in Mander AP, Sweeting
      MJ (2015) <DOI:10.1002/sim.6434>.
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - dose-finding experiment 
    main: 
      - pipedesign 
        - dose finding 
        - pipe.design(N=dim(data)[1]+1, S=1, c, theta, pi=NULL, prior.med=NULL, prior.ss=NULL, strategy, 
        admis, constraint="none", epsilon=NULL, mode="sim", data=matrix(nrow=0,ncol=0), a=NULL, b=NULL, 
        alternate=FALSE, uppertox.constraint=NULL, stop=NULL, non.admissible=NULL, seed=NULL)
    data: 'no'
- VNM:
    download2020: 7121
    depends: methods
    imports: graphics, Rcpp
    suggests: ''
    author: Seung Won Hyun, Weng Kee Wong, and Yarong Yang
    date: '2018-05-16'
    version: '7.1'
    title: Finding Multiple-Objective Optimal Designs for the 4-Parameter Logistic
      Model
    description: Provide tools for finding multiple-objective optimal designs for
      estimating the shape of dose-response, the ED50 (the dose producing an effect
      midway between the expected responses at the extreme doses) and the MED (the
      minimum effective dose level) for the 2,3,4-parameter logistic models and for
      evaluating its efficiencies for the three objectives. The acronym VNM stands
      for V-algorithm using Newton Raphson method to search multiple-objective optimal
      design.
    domain: clinical trial 
    paper: https://www.jstatsoft.org/index.php/jss/article/view/v083i05/v83i05.pdf
    relevance: 'yes'
    type: 
      - optimised design 
    main: 
      - MOPT
        - optimised design 
        - MOPT(LB, UB, P, lambda, delta, r, grid, epsilon, epsilon_w, verbose)
      - Deff 
        - optimised design 
        - Deff(weight,P,dose,LB,UB,r,grid,epsilon,epsilon_w)
      - ceff1 
        - optimised design 
        - ceff1(weight,P,dose,LB,UB,r,grid,epsilon,epsilon_w)
      - ceff2 
        - optimised design
        - ceff2(weight,P,dose,LB,UB,delta,r,grid,epsilon,epsilon_w)
      - S.Weight 
        - optimised design 
        - S.Weight(X,P,lambda,delta,epsilon_w)
    data: 'no'
- seqDesign:
    download2020: 7118
    depends: R (>= 2.16), survival
    imports: ''
    suggests: knitr, R.rsp
    author: Michal Juraska [aut, cre], Doug Grove [aut], Xuesong Yu [ctb], Peter Gilbert
      [ctb], Stephanie Wu [ctb]
    date: '2019-05-14'
    version: '1.2'
    title: Simulation and Group Sequential Monitoring of Randomized Two-Stage Treatment
      Efficacy Trials with Time-to-Event Endpoints
    description: A modification of the preventive vaccine efficacy trial design of
      Gilbert, Grove et al. (2011, Statistical Communications in Infectious Diseases)
      is implemented, with application generally to individual-randomized clinical
      trials with multiple active treatment groups and a shared control group, and
      a study endpoint that is a time-to-event endpoint subject to right-censoring.
      The design accounts for the issues that the efficacy of the treatment/vaccine
      groups may take time to accrue while the multiple treatment administrations/vaccinations
      are given; there is interest in assessing the durability of treatment efficacy
      over time; and group sequential monitoring of each treatment group for potential
      harm, non-efficacy/efficacy futility, and high efficacy is warranted. The design
      divides the trial into two stages of time periods, where each treatment is first
      evaluated for efficacy in the first stage of follow-up, and, if and only if
      it shows significant treatment efficacy in stage one, it is evaluated for longer-term
      durability of efficacy in stage two. The package produces plots and tables describing
      operating characteristics of a specified design including an unconditional power
      for intention-to-treat and per-protocol/as-treated analyses; trial duration;
      probabilities of the different possible trial monitoring outcomes (e.g., stopping
      early for non-efficacy); unconditional power for comparing treatment efficacies;
      and distributions of numbers of endpoint events occurring after the treatments/vaccinations
      are given, useful as input parameters for the design of studies of the association
      of biomarkers with a clinical outcome (surrogate endpoint problem). The code
      can be used for a single active treatment versus control design and for a single-stage
      design.
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - group sequential design 
      - randomised design 
    main: "?"
    data: 'no'
- powerGWASinteraction:
    download2020: 7062
    depends: R (>= 2.10), mvtnorm, pwr
    imports: stats
    suggests: ''
    author: Charles Kooperberg <clk@fredhutch.org> and Li Hsu <lih@fredhutch.org>
    date: '2015-07-02'
    version: 1.1.3
    title: Power Calculations for GxE and GxG Interactions for GWAS
    description: Analytical power calculations for GxE and GxG interactions for case-control
      studies of candidate genes and genome-wide association studies (GWAS). This
      includes power calculation for four two-step screening and testing procedures.
      It can also calculate power for GxE and GxG without any screening.
    paper: ''
    domain: genetics 
    relevance: 'yes'
    type: 
      - power analysis 
    main: 
      - powerGE
        - power analysis 
        - powerGE(n, power, model, caco, alpha, alpha1, maintain.alpha)
      - powerGG
        - power analysis 
        - powerGG(n, power, model, caco, alpha, alpha1)
    data: 'no'
- unrepx:
    download2020: 7014
    depends: ''
    imports: ''
    suggests: knitr
    author: Russell Lenth [aut, cre, cph]
    date: '2017-07-26'
    version: '1.0'
    title: Analysis and Graphics for Unreplicated Experiments
    description: Provides half-normal plots, reference plots, and Pareto plots of
      effects from an unreplicated experiment, along with various pseudo-standard-error
      measures, simulated reference distributions, and other tools. Many of these
      methods are described in Daniel C. (1959) <doi:10.1080/00401706.1959.10489866>
      and/or Lenth R.V. (1989) <doi:10.1080/00401706.1989.10488595>, but some new
      approaches are added and integrated in one package.
    paper: ''
    domain: 'general'
    relevance: '?'
    type: 
      - analysis of experiment 
      - visualisation 
    main: 
      - dot.plot
        - visualisation
        - dot.plot(x, pch = 16, cex.dot = 1, spacing = 1, xlab, xlim = range(x), ...)
      - hnplot 
        - visualisation
        - hnplot(effects, ref = TRUE, half = TRUE, horiz = TRUE, method = "Zahn", a = 0.375, col = half, 
        pch = 16, ID = FALSE, alpha, ...)
      - parplot 
        - visualisation
        - parplot(effects, pareto = TRUE, absolute = TRUE, horiz = FALSE, col = absolute, critvals, 
        method = "Zahn", alpha = .05, refdist, sim.opts, ylab = "Estimated effects", top = n.effects, 
        cex.annot = 0.75, ...)
    data: 'no'
- VdgRsm:
    download2020: 6987
    depends: R (>= 3.1.2)
    imports: permute, AlgDesign
    suggests: akima
    author: Patchanok Srisuradetchai, John J. Borkowski
    date: '2015-03-29'
    version: '1.5'
    title: Plots of Scaled Prediction Variances for Response Surface Designs
    description: Functions for creating variance dispersion graphs, fraction of design
      space plots, and contour plots of scaled prediction variances for second-order
      response surface designs in spherical and cuboidal regions. Also, some standard
      response surface designs can be generated.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - response-surface design 
      - variance dispersion graph 
      - visualisation (design)
    main: 
      - fds.cube 
        - visualisation 
        - fds.cube(design.matrix, design.matrix.2 = NULL, design.matrix.3 = NULL, des.names = c("Design 1","Design 2","Design 3"))
      - fds.sphere 
        - visualisation 
        - fds.sphere(design.matrix, design.matrix.2 = NULL, design.matrix.3 = NULL, des.names = c("Design 1","Design 2","Design 3"), scale = TRUE, label = "ON")
      - spvcontour 
        - visualisation 
        - spvcontour(design.matrix, shape, max.radius = sqrt(2), length = 100, nlevels = 10, title = "Contour of SPVs")
    data: 'no'
- ThreeArmedTrials:
    download2020: 6920
    depends: R (>= 3.0.0)
    imports: stats, MASS, numDeriv
    suggests: testthat, knitr, rmarkdown
    author: Tobias Mütze <tobias.muetze at outlook.com> [aut, cre] , Tim Friede [ctb]
    date: '2019-02-17'
    version: 1.0-3
    title: Design and Analysis of Clinical Non-Inferiority or Superiority Trials with
      Active and Placebo Control
    description: 'Design and analyze three-arm non-inferiority or superiority trials
      which follow a gold-standard design, i.e. trials with an experimental treatment,
      an active, and a placebo control. Method for the following distributions are
      implemented: Poisson (Mielke and Munk (2009) <arXiv:0912.4169>), negative binomial
      (Muetze et al. (2016) <doi:10.1002/sim.6738>), normal (Pigeot et al. (2003)
      <doi:10.1002/sim.1450>; Hasler et al. (2009) <doi:10.1002/sim.3052>), binary
      (Friede and Kieser (2007) <doi:10.1002/sim.2543>), nonparametric (Muetze et
      al. (2017) <doi:10.1002/sim.7176>), exponential (Mielke and Munk (2009) <arXiv:0912.4169>).'
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - sample design 
      - sample size calculation 
      - optimised design?
      - analysis of experiment 
    main: 
      - opt_alloc_RET
        - sample size calculation, optimised sample size 
        - opt_alloc_RET(experiment, reference, placebo, Delta, distribution, h = NULL)
      - power_RET
        - power calculation 
        - power_RET(experiment, reference, placebo, Delta, sig_level = NULL, power = NULL, n = NULL, allocation = c(1/3, 1/3, 1/3), distribution = NULL, ...)
      - test_RET
        - optimised design 
        - test_RET(xExp, xRef, xPla, Delta, ...)
    data: 'yes'
- ph2bye:
    download2020: 6857
    depends: stats, graphics, animation, nleqslv
    imports: Rcpp, VGAM
    suggests: clinfun, gsDesign, survival
    author: Yalin Zhu, Rui Qin
    date: '2016-08-21'
    version: 0.1.4
    title: Phase II Clinical Trial Design Using Bayesian Methods
    description: Calculate the Bayesian posterior/predictive probability and determine
      the sample size and stopping boundaries for single-arm Phase II design.
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - optimised design
      - stopping boundaries 
    main: 
      - PostP.design
        - stopping boundary calculation 
        - PostP.design(type, nmax, a, b, p0, theta, optimize)
      - PredP.design 
        - stopping boundary calculation 
        - PredP.design(type, nmax, a, b, p0, theta_t, theta, optimize)
      - MultPostP.design
        - decision boundary 
        - MultPostP(x, n, a.vec, p0)
    data: 'no'
- OptInterim:
    download2020: 6818
    depends: mvtnorm, clinfun, stats, graphics, R (>= 2.14.1)
    imports: ''
    suggests: ''
    author: Bo Huang <bo.huang@pfizer.com> and Neal Thomas <neal.thomas@pfizer.com>
    date: 2012-09-30
    version: 3.0.1
    title: Optimal Two and Three Stage Designs for Single-Arm and Two-Arm Randomized
      Controlled Trials with a Long-Term Binary Endpoint
    description: Optimal two and three stage designs monitoring time-to-event endpoints
      at a specified timepoint
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - optimised design 
      - randomised design 
    main: 
      - OptimDes 
        - optimised design, randomised design
        - OptimDes(B.init, m.init, alpha, beta, param, x, target = c("EDA", "ETSL","ES"), 
        sf=c("futility","OF","Pocock"), num.arm,r=0.5, num.stage=2, pause=0, control = OptimDesControl(),...)
    data: 'no'
- OptimaRegion:
    download2020: 6763
    depends: R (>= 3.3.0)
    imports: |-
      boot, DepthProc, fields, geometry, magrittr, mclust, nloptr,
      rsm, Rdpack, Rdsdp, spam, stringr
    suggests: knitr, lhs, rmarkdown
    author: Enrique del Castillo, Peng Chen, Adam Meyers, John Hunt, and James Rapkin
    date: '2019-07-02'
    version: '1.1'
    title: Confidence Regions for Optima
    description: Computes confidence regions on the location of response surface optima.
    paper: https://www.tandfonline.com/doi/abs/10.1080/03610918.2020.1823412?journalCode=lssp20
    domain: 'general'
    relevance: 'yes'
    type: 
      - optimised design 
      - response-surface design 
    main: 
      - OptRegionQuad
        - confidence region 
        - OptRegionQuad(X, y, nosim = 200, alpha = 0.05, LB, UB, triangularRegion = FALSE, vertex1 = NULL, 
        vertex2 = NULL, maximization = TRUE, xlab = "Protein eaten, mg", ylab = "Carbohydrates eaten, mg", 
        outputPDFFile = "CRplot.pdf")
      - OptRegionTps 
        - confidence region 
        - OptRegionTps(X, y, lambda = 0.04, nosim = 1000, alpha = 0.05, LB, UB, triangularRegion = FALSE, 
        vertex1 = NULL, vertex2 = NULL, maximization = TRUE, xlab = "Protein eaten, mg",
        ylab = "Carbohydrate eaten, mg", outputPDFFile = "CRplot.pdf", outputOptimaFile = "Optima.txt")
      - GloptiPolyRegion 
        - confidence region 
        - GloptiPolyRegion(X, y, degree, lb, ub, B = 200, alpha = 0.05, maximization = TRUE, axes_labels = NULL,
        outputPDFFile = "CRplot.pdf", verbose = TRUE)
      - CRcompare
        - confidence interval 
        - CRcompare(X1, y1, X2, y2, responseType = "TPS", lambda = 0.04, nosim1and2 = 200, alpha = 0.05, LB1, 
        LB2, UB1, UB2, triangularRegion1 = FALSE, vertex11 = NULL, vertex21 = NULL, triangularRegion2 = FALSE, 
        vertex12 = NULL, vertex22 = NULL, maximization1 = TRUE, maximization2 = TRUE, 
        xlab1and2 = "Protein eaten (mg)", ylab1and2 = "Carbohydrates eaten (mg)",
        outputPDFFile1 = "CR_plot1.pdf", outputOptimaFile1 = "Optima1.txt", outputPDFFile2 = "CR_plot2.pdf", 
        outputOptimaFile2 = "Optima2.txt")
      - GloptipolyR
        - optimised design 
        - GloptiPolyR(P)
    data: 'yes'
- powerbydesign:
    download2020: 6689
    depends: ''
    imports: lme4, gdata, MASS, reshape2, stringr, plyr, ggplot2
    suggests: testthat
    author: Frank Papenmeier <frank.papenmeier@uni-tuebingen.de> [aut, cre]
    date: '2021-02-25'
    version: 1.0.5
    title: Power Estimates for ANOVA Designs
    description: Functions for bootstrapping the power of ANOVA designs based on estimated
      means and standard deviations of the conditions. Please refer to the documentation
      of the boot.power.anova() function for further details.
    paper: ''
    domain: 'general'
    relevance: 'no'
    type: 
      - power analysis 
      - analysis of experiment 
    main: 
      - boot.power.anova 
        - power calculation 
        - boot.power.anova(design, n_from, n_to, num_iterations_bootstrap, alpha = 0.05)
    data: 'no'
- rodd:
    download2020: 6667
    depends: R (>= 3.0.0)
    imports: numDeriv, quadprog, Matrix, rootSolve, matrixcalc
    suggests: mvtnorm
    author: Roman Guchenko <RomanGuchenko@yandex.ru> [aut, cre]
    date: '2016-01-12'
    version: 0.2-1
    title: Optimal Discriminating Designs
    description: A collection of functions for numerical construction of optimal discriminating
      designs. At the current moment T-optimal designs (which maximize the lower bound
      for the power of F-test for regression model discrimination), KL-optimal designs
      (for lognormal errors) and their robust analogues can be calculated with the
      package.
    paper: ''
    domain: 'general'
    relevance: '?'
    type: 
      - optimised design?
      - modeling 
    main: 
      - tpopt
        - optimised design 
        - tpopt(x, w = rep(1, length(x)) / length(x), eta, theta.fix, theta.var = NULL, p, x.lb = min(x), x.rb = max(x), opt = list())
      - KLopt.lnorm
        - optimised design 
        - KLopt.lnorm(x, w = rep(1, length(x)) / length(x), eta, sq.var, theta.fix, theta.var = NULL, p, x.lb = min(x), x.rb = max(x), opt = list())
    data: 'no'
- ph2bayes:
    download2020: 6656
    depends: ''
    imports: stats, Rcpp (>= 0.12.15)
    suggests: ''
    author: Kengo Nagashima [aut, cre]
    date: '2018-02-26'
    version: 0.0.2
    title: Bayesian Single-Arm Phase II Designs
    description: An implementation of Bayesian single-arm phase II design methods
      for binary outcome based on posterior probability (Thall and Simon (1994) <doi:10.2307/2533377>)
      and predictive probability (Lee and Liu (2008) <doi:10.1177/1740774508089279>).
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - optimised design?
    main: 
      - postprob
        - bayesian optimised design 
        - postprob(y, n, alpha_e, beta_e, alpha_s, beta_s, delta)
      - predprob
        - bayesian optimised design 
        - predprob(y, n, nmax, alpha_e, beta_e, p_s, theta_t)
    data: 'no'
- sp23design:
    download2020: 6573
    depends: R (>= 3.0), mvtnorm, survival
    imports: ''
    suggests: RUnit
    author: Balasubramanian Narasimhan [aut, cre], Mei-Chiung Shih [aut], Pei He [aut]
    date: '2012-01-01'
    version: '0.9'
    title: Design and Simulation of seamless Phase II-III Clinical Trials
    description: Provides methods for generating, exploring and executing seamless
      Phase II-III designs of Lai, Lavori and Shih using generalized likelihood ratio
      statistics. Includes pdf and source files that describe the entire R implementation
      with the relevant mathematical details.
    paper: ''
    domain: clinical trial 
    relevance: 'yes'
    type: 
      - seamless Phase II-III design
      - optimised design 
      - analysis of experiment 
    main: 
      - generateSP23Design
        - seamless Phase II-III design
        - generateSP23Design(trueParameters, trialParameters)
      - exploreSP23Design 
        - seamless Phase II-III design, optimised design 
        - exploreSP23Design(sp23Design, numberOfSimulations = 25, rngSeed = 12345, showProgress = TRUE)
      - executeSP23Design 
        - analysis of experiment 
        - executeSP23Design(sp23DesignObject, data, currentCalendarTime)
      - analyzeSP23Design 
        - analysis of experiment 
        - analyzeSP23Design(sp23Design, trialHistory = NULL, data = NULL, col=c("red", "red", "brown", "brown"), lty=c(1,2,1,2))
    data: 'no'
- sFFLHD:
    download2020: 6459
    depends: DoE.base
    imports: methods, stats, conf.design, R6
    suggests: testthat
    author: Collin Erickson
    date: '2018-05-17'
    version: 0.1.2
    title: Sequential Full Factorial-Based Latin Hypercube Design
    description: Gives design points from a sequential full factorial-based Latin
      hypercube design, as described in Duan, Ankenman, Sanchez, and Sanchez (2015,
      Technometrics, <doi:10.1080/00401706.2015.1108233>).
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - latin hypercube design
      - space filling 
      - optimised design 
    main: 
      - sFFLHDmm
        - optimised design, latin hypercube design
        - R6 object 
      - sFFLHD_Lflex
        - latin hypercube design
        - R6 object
    data: 'no'
- optbdmaeAT:
    download2020: 6340
    depends: R (>= 3.3.1), MASS, Matrix, igraph, tcltk
    imports: ''
    suggests: ''
    author: Dibaba Bayisa Gemechu, Legesse Kassa Debusho, and Linda Haines
    date: '2017-02-07'
    version: 1.0.1
    title: Optimal Block Designs for Two-Colour cDNA Microarray Experiments
    description: Computes A-, MV-, D- and E-optimal or near-optimal block designs
      for two-colour cDNA microarray experiments using the linear fixed effects and
      mixed effects models where the interest is in a comparison of all possible elementary
      treatment contrasts. The algorithms used in this package are based on the treatment
      exchange and array exchange algorithms of Debusho, Gemechu and Haines (2016,
      unpublished). The package also provides an optional method of using the graphical
      user interface (GUI) R package tcltk to ensure that it is user friendly.
    paper: ''
    domain: genomic sequencing 
    relevance: 'yes'
    type: 
      - microarray experiment 
      - optimised design 
      - block design 
    main: 
      - optbdmaeAT
        - optimised design 
        - optbdmaeAT(trt.N, blk.N, theta, nrep, itr.cvrgval, Optcrit = "", Alg = "", ...)
    data: 'no'
- optrcdmaeAT:
    download2020: 6333
    depends: R (>= 3.3.2), MASS, Matrix, igraph, tcltk
    imports: ''
    suggests: ''
    author: Legesse Kassa Debusho, Dibaba Bayisa Gemechu, and Linda Haines
    date: '2017-04-12'
    version: 1.0.0
    title: Optimal Row-Column Designs for Two-Colour cDNA Microarray Experiments
    description: Computes A-, MV-, D- and E-optimal or near-optimal row-column designs
      for two-colour cDNA microarray experiments using the linear fixed effects and
      mixed effects models where the interest is in a comparison of all pairwise treatment
      contrasts. The algorithms used in this package are based on the array exchange
      and treatment exchange algorithms adopted from Debusho, Gemechu and Haines (2016,
      unpublished) algorithms after adjusting for the row-column designs setup. The
      package also provides an optional method of using the graphical user interface
      (GUI) R package tcltk to ensure that it is user friendly.
    paper: ''
    domain: genomic sequencing 
    relevance: 'yes'
    type: 
      - microarray experiment 
      - optimised design 
    main: 
      - optrcdmaeAT
        - optimised design 
        - optrcdmaeAT(trt.N, col.N, theta, nrep, itr.cvrgval, Optcrit = "", Alg = "", ...)
    data: 'no'
- soptdmaeA:
    download2020: 6272
    depends: R (>= 3.3.2), MASS, Matrix, igraph, tcltk
    imports: ''
    suggests: ''
    author: Dibaba Bayisa Gemechu, Legesse Kassa Debusho, and Linda Haines
    date: '2017-06-10'
    version: 1.0.0
    title: Sequential Optimal Designs for Two-Colour cDNA Microarray Experiments
    description: Computes sequential A-, MV-, D- and E-optimal or near-optimal block
      and row-column designs for two-colour cDNA microarray experiments using the
      linear fixed effects and mixed effects models where the interest is in a comparison
      of all possible elementary treatment contrasts. The package also provides an
      optional method of using the graphical user interface (GUI) R package 'tcltk'
      to ensure that it is user friendly.
    paper: ''
    domain: genomic sequencing 
    relevance: 'yes'
    type: 
      - microarray experiment 
      - optimised design 
    main: 
      - soptdmaeA
        - optimised design 
        - soptdmaeA(trt.N, blk.N, theta, nrep, strt, sary, des0, dtype, Optcrit = "", ...)
    data: 'no'
- rsurface:
    download2020: 5197
    depends: R (>= 3.5)
    imports: grDevices, plotly, rsm, stats
    suggests: ''
    author: Timothy Schwinghamer [aut, cre], Dutilleul Pierre [aut, cph]
    date: '2018-05-18'
    version: 1.1.0
    title: Design of Rotatable Central Composite Experiments and Response Surface
      Analysis
    description: Produces tables with the level of replication (number of replicates)
      and the experimental uncoded values of the quantitative factors to be used for
      rotatable Central Composite Design (CCD) experimentation and a 2-D contour plot
      of the corresponding variance of the predicted response according to Mead et
      al. (2012) <doi:10.1017/CBO9781139020879> design_ccd(), and analyzes CCD data
      with response surface methodology ccd_analysis(). A rotatable CCD provides values
      of the variance of the predicted response that are concentrically distributed
      around the average treatment combination used in the experimentation, which
      with uniform precision (implied by the use of several replicates at the average
      treatment combination) improves greatly the search and finding of an optimum
      response. These properties of a rotatable CCD represent undeniable advantages
      over the classical factorial design, as discussed by Panneton et al. (1999)
      <doi:10.13031/2013.13267> and Mead et al. (2012) <doi:10.1017/CBO9781139020879.018>
      among others.
    paper: ''
    domain: 'general'
    relevance: 'yes'
    type: 
      - response-surface design 
      - analysis of experiment 
    main: 
      - design_ccd()
        - response surface design
        - design_ccd(j, k)
      - ccd_analysis()
        - analysis of experiment, response surface design
        - ccd_analysis(x)
    data: 'yes'
